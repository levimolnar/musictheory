{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { NoteCard } from '../NoteCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [dragId, setDragId] = useState(undefined);\n  const [payloadStorage, setPayloadStorage] = useState(undefined);\n  const [blocked, setBlocked] = useState(false);\n  const [throttled, setThrottled] = useState(false);\n  const throttle = () => {\n    setThrottled(true);\n    setTimeout(() => {\n      setThrottled(false);\n    }, 100);\n  };\n  const handleDragStart = ({\n    active\n  }) => {\n    setBlocked(false);\n    setThrottled(false);\n    setDragId(active.id);\n    if (active.data.current.payload) {\n      setPayloadStorage(active.data.current.payload);\n    }\n    ;\n  };\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) {\n      return;\n    }\n    ;\n    // console.log(payloadStorage);\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      const {\n        remove: itemRemove\n      } = over.data.current.payload.setFunc;\n      const activeContainerId = active.data.current.sortable.containerId;\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        // console.log('remove from sortable');\n\n        // remove based on ID, can't remove wrong index.\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n\n        active.data.current.payload.setFunc.remove(0, active.data.current.payload.chord.id);\n        setBlocked(false);\n        throttle();\n        return;\n      }\n      ;\n      return;\n    }\n    ;\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\n      // in case sortables are next to eachother and draggable does not meet !over, still remove item.\n\n      // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n      active.data.current.payload.setFunc.remove(0, active.data.current.payload.chord.id);\n      setBlocked(false);\n      throttle();\n      return;\n    }\n    ;\n    if (payloadStorage.chord && !throttled) {\n      const {\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      // const setItemsFunc = over.data.current.payload.setFunc;\n      const {\n        add: itemAdd,\n        swap: itemSwap\n      } = over.data.current.payload.setFunc;\n      const containerId = over.data.current.sortable.containerId;\n      const duplicateIndex = items.findIndex(id => id === dragId);\n      if (duplicateIndex === -1 && !blocked) {\n        // console.log('add to sortable');\n\n        // setItemsFunc((items: any) => [...items.slice(0, newIndex), {...payloadStorage.chord, seventh: payloadStorage.seventh, id: dragId}, ...items.slice(newIndex)]);\n        itemAdd(containerId, newIndex, {\n          ...payloadStorage.chord,\n          seventh: payloadStorage.seventh,\n          id: dragId\n        });\n        setBlocked(true);\n        throttle();\n        return;\n      } else {\n        // console.log('swap cards');\n\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n        itemSwap(containerId, duplicateIndex, newIndex);\n        throttle();\n        return;\n      }\n      ;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on in any case\n      payloadStorage.setFunc(prevScales => {\n        const newScales = [...prevScales];\n        newScales[payloadStorage.index].id = uuidv4();\n        return newScales;\n      });\n    }\n    if (!over) return;\n\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\n      // console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index; // !\n      const newIndex = over.data.current.sortable.index;\n      const {\n        swap: itemSwap\n      } = over.data.current.payload.setFunc;\n      const containerId = over.data.current.sortable.containerId;\n\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n      // over.data.current.payload.setFunc.swap(0, oldIndex, newIndex);\n      itemSwap(containerId, oldIndex, newIndex);\n      return;\n    }\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      // console.log('chart -> sortable')\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: handleDragStart,\n    onDragCancel: () => {\n      setDragId(undefined);\n      setPayloadStorage(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    children: [children, payloadStorage ? /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(NoteCard, {\n        chord: payloadStorage.chord,\n        seventh: payloadStorage.seventh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"K7+OEM0/i5NekS0IGmcmlNBkcoE=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","v4","uuidv4","DndContext","DragOverlay","NoteCard","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgContext","undefined","ModeContext","children","_s","dragId","setDragId","payloadStorage","setPayloadStorage","blocked","setBlocked","throttled","setThrottled","throttle","setTimeout","handleDragStart","active","id","data","current","payload","handleDragOver","over","remove","itemRemove","setFunc","activeContainerId","sortable","containerId","chord","hasOwnProperty","index","newIndex","items","add","itemAdd","swap","itemSwap","duplicateIndex","findIndex","seventh","handleDragEnd","origin","prevScales","newScales","oldIndex","onDragStart","onDragCancel","onDragOver","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { DndContext, DragOverlay, useDraggable, useDroppable } from '@dnd-kit/core';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\r\nimport { NoteCard } from '../NoteCard';\r\n\r\nexport const ProgContext = createContext<any>(undefined);\r\n\r\nexport const ModeContext = ({children}: {children: any}) => {\r\n\r\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\r\n  const [payloadStorage, setPayloadStorage] = useState<any | undefined>(undefined);\r\n  const [blocked, setBlocked] = useState<boolean>(false);\r\n  const [throttled, setThrottled] = useState<boolean>(false);\r\n\r\n  const throttle = () => {\r\n    setThrottled(true);\r\n    setTimeout(() => {\r\n      setThrottled(false);\r\n    }, 100);\r\n  };\r\n\r\n  const handleDragStart = ({active}: any) => {\r\n    setBlocked(false);\r\n    setThrottled(false);\r\n    setDragId(active.id); \r\n    if (active.data.current.payload) { setPayloadStorage(active.data.current.payload) };\r\n  }\r\n\r\n  const handleDragOver = ({active, over}: any) => {\r\n\r\n    if (!payloadStorage) { return };\r\n    // console.log(payloadStorage);\r\n\r\n    if (!over || !over.data.current) {\r\n      // if object hovered over is not drop zone\r\n\r\n      const {remove: itemRemove} = over.data.current.payload.setFunc;\r\n      const activeContainerId = active.data.current.sortable.containerId;      \r\n\r\n      if (active.data.current.sortable) {\r\n        // if from sortable, remove card at index from sortable\r\n        // console.log('remove from sortable');\r\n\r\n        // remove based on ID, can't remove wrong index.\r\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\r\n\r\n        active.data.current.payload.setFunc.remove(0, active.data.current.payload.chord.id);\r\n\r\n        setBlocked(false);\r\n        throttle();\r\n        return\r\n      };\r\n\r\n      return\r\n    };\r\n\r\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\r\n      // in case sortables are next to eachother and draggable does not meet !over, still remove item.\r\n\r\n      // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\r\n      active.data.current.payload.setFunc.remove(0, active.data.current.payload.chord.id);\r\n\r\n      setBlocked(false);\r\n      throttle();\r\n      return\r\n    };\r\n\r\n    if (payloadStorage.chord && !throttled) {\r\n\r\n      const {index: newIndex, items } = over.data.current.sortable;\r\n      // const setItemsFunc = over.data.current.payload.setFunc;\r\n      const {add: itemAdd, swap: itemSwap} = over.data.current.payload.setFunc;\r\n      const containerId = over.data.current.sortable.containerId;\r\n\r\n      const duplicateIndex = items.findIndex((id: any) => id === dragId);\r\n      \r\n      if (duplicateIndex === -1 && !blocked) {\r\n        // console.log('add to sortable');\r\n\r\n        // setItemsFunc((items: any) => [...items.slice(0, newIndex), {...payloadStorage.chord, seventh: payloadStorage.seventh, id: dragId}, ...items.slice(newIndex)]);\r\n        itemAdd(containerId, newIndex, {...payloadStorage.chord, seventh: payloadStorage.seventh, id: dragId});\r\n\r\n        setBlocked(true);\r\n        throttle();\r\n        return;\r\n\r\n      } else {\r\n        // console.log('swap cards');\r\n        \r\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\r\n        itemSwap(containerId, duplicateIndex, newIndex);\r\n\r\n        throttle();\r\n        return;\r\n      };\r\n    };\r\n  }\r\n\r\n  const handleDragEnd = ({active, over}: any) => {\r\n\r\n    if (payloadStorage.origin === 'chart') {\r\n      // reset id of dragged chart item on in any case\r\n      payloadStorage.setFunc((prevScales: Array<{id: string, root: string, type: {full: string, short: string, symbol: string}, num: string}>) => {\r\n        const newScales = [...prevScales];\r\n        newScales[payloadStorage.index].id = uuidv4();\r\n        return newScales;\r\n      });\r\n    }\r\n\r\n    if (!over) return;\r\n\r\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\r\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\r\n\r\n      // console.log('sortable -> sortable')\r\n\r\n      const oldIndex = active.data.current.sortable.index;  // !\r\n      const newIndex = over.data.current.sortable.index;\r\n\r\n      const {swap: itemSwap} = over.data.current.payload.setFunc;\r\n      const containerId = over.data.current.sortable.containerId;\r\n\r\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\r\n      // over.data.current.payload.setFunc.swap(0, oldIndex, newIndex);\r\n      itemSwap(containerId, oldIndex, newIndex);\r\n      return\r\n    }\r\n\r\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\r\n      // console.log('chart -> sortable')\r\n\r\n      // payloadStorage.setFunc((prevScales: any) => {\r\n      //   const newScales = {...prevScales};\r\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\r\n      //   return newScales;\r\n      // });\r\n\r\n      return\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <DndContext\r\n      onDragStart={handleDragStart}\r\n      onDragCancel={() => {\r\n        setDragId(undefined); \r\n        setPayloadStorage(undefined);\r\n      }}\r\n      onDragOver={handleDragOver}\r\n      onDragEnd={handleDragEnd}\r\n    >\r\n      {children}\r\n      {payloadStorage ? <DragOverlay><NoteCard chord={payloadStorage.chord} seventh={payloadStorage.seventh}/></DragOverlay> : <></>}\r\n    </DndContext>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}