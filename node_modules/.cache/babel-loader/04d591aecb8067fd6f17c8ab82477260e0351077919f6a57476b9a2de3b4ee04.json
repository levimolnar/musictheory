{"ast":null,"code":"const noteMatrix = [[{\n  'number': 10,\n  'char': 'C𝄫'\n}, {\n  'number': 11,\n  'char': 'C♭'\n}, {\n  'number': 0,\n  'char': 'C'\n}, {\n  'number': 1,\n  'char': 'C♯'\n}, {\n  'number': 2,\n  'char': 'C𝄪'\n}], [{\n  'number': 0,\n  'char': 'D𝄫'\n}, {\n  'number': 1,\n  'char': 'D♭'\n}, {\n  'number': 2,\n  'char': 'D'\n}, {\n  'number': 3,\n  'char': 'D♯'\n}, {\n  'number': 4,\n  'char': 'D𝄪'\n}], [{\n  'number': 2,\n  'char': 'E𝄫'\n}, {\n  'number': 3,\n  'char': 'E♭'\n}, {\n  'number': 4,\n  'char': 'E'\n}, {\n  'number': 5,\n  'char': 'E♯'\n}, {\n  'number': 6,\n  'char': 'E𝄪'\n}], [{\n  'number': 3,\n  'char': 'F𝄫'\n}, {\n  'number': 4,\n  'char': 'F♭'\n}, {\n  'number': 5,\n  'char': 'F'\n}, {\n  'number': 6,\n  'char': 'F♯'\n}, {\n  'number': 7,\n  'char': 'F𝄪'\n}], [{\n  'number': 5,\n  'char': 'G𝄫'\n}, {\n  'number': 6,\n  'char': 'G♭'\n}, {\n  'number': 7,\n  'char': 'G'\n}, {\n  'number': 8,\n  'char': 'G♯'\n}, {\n  'number': 9,\n  'char': 'G𝄪'\n}], [{\n  'number': 7,\n  'char': 'A𝄫'\n}, {\n  'number': 8,\n  'char': 'A♭'\n}, {\n  'number': 9,\n  'char': 'A'\n}, {\n  'number': 10,\n  'char': 'A♯'\n}, {\n  'number': 11,\n  'char': 'A𝄪'\n}], [{\n  'number': 9,\n  'char': 'B𝄫'\n}, {\n  'number': 10,\n  'char': 'B♭'\n}, {\n  'number': 11,\n  'char': 'B'\n}, {\n  'number': 0,\n  'char': 'B♯'\n}, {\n  'number': 1,\n  'char': 'B𝄪'\n}]];\nconst positions = [[[0, 2], [6, 3], [1, 0]], [[1, 1], [0, 3], [6, 4]], [[1, 2], [2, 0], [0, 4]], [[2, 1], [1, 3], [3, 0]], [[2, 2], [3, 1], [1, 4]], [[3, 2], [2, 3], [4, 0]], [[4, 1], [3, 3], [2, 4]], [[4, 2], [5, 0], [3, 4]], [[5, 1], [4, 3]], [[5, 2], [6, 0], [4, 4]], [[6, 1], [5, 3], [0, 0]], [[6, 2], [0, 1], [5, 4]]];\nconst accTransform = a => {\n  // Function transforms y-index in matrix to degree of accidental. e.g. [0,1,2,3,4] -> [2,1,0,1,2]\n  return Math.abs(a - 2);\n};\nexport const pitchSpeller = (scales, transpose) => {\n  /*\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\n  */\n\n  Object.keys(scales).forEach(scaleName => {\n    const startPositions = positions[(scales[scaleName][0] + transpose) % 12];\n    const scaleLength = scales[scaleName].length;\n    var lowestCount = 999;\n    var winner = undefined;\n    for (let i = 0; i < startPositions.length; i++) {\n      const [sx, sy] = startPositions[i];\n\n      // if (i > 1) break\n\n      const resultArray = [noteMatrix[sx][sy]['char']];\n      var accidentalCount = accTransform(sy);\n      for (let j = 1; j < scaleLength; j++) {\n        const x = (j + sx) % scaleLength;\n        const matrixY = noteMatrix[x].map(obj => obj.number);\n        const transposedNote = (scales[scaleName][j] + transpose) % 12;\n        const indexY = matrixY.indexOf(transposedNote);\n        if (indexY === -1) {\n          accidentalCount = 999;\n          break;\n        }\n        resultArray.push(noteMatrix[x][indexY].char);\n        accidentalCount += accTransform(indexY);\n      }\n      if (accidentalCount < lowestCount) {\n        lowestCount = accidentalCount;\n        winner = resultArray;\n      }\n    }\n    console.log(scaleName, winner);\n  });\n\n  // for scaleName in scales:\n\n  //   if len(scales[scaleName]) != 7:\n  //     print(f\"{scaleName:<18}ERROR: Scale not heptatonic.\", end=\"\")\n  //     continue\n\n  //   # print(f\"{scaleName}:\")\n  //   startCoords = positions[(scales[scaleName][0]+ int(transpose)) % 12]\n  //   scaleLength = len(scales[scaleName])\n\n  //   lowestCount = 999\n  //   winner = None\n\n  //   for i, (sx, sy) in enumerate(startCoords):\n  //     # iter possible starting coordinates\n\n  //     # third coordinate is generally not needed\n  //     # few scales start with a double accidental\n  //     if i > 1:\n  //       break\n\n  //     # noteRange = [(sx+1 + i) % 7 for i in range(6)]\n  //     noteRange = [(sx+1 + i) % scaleLength for i in range(scaleLength-1)]\n\n  //     resultArray = [noteMatrix[sx,sy]['char']]\n  //     accidentalCount = accTransform(sy)\n\n  //     for j, x in enumerate(noteRange):\n  //     # iter notes in scale (first skipped)\n  //       matrixY = [noteMatrix[x,k]['number'] for k in range(5)] \n  //       try:\n  //         indexY = matrixY.index((scales[scaleName][j+1] + int(transpose)) % 12)\n  //         resultArray.append(noteMatrix[x, indexY]['char'])\n  //         accidentalCount += accTransform(indexY)\n  //       except:\n  //         accidentalCount = 999\n  //         break\n\n  //     # if len(resultArray) >= len(scales[scaleName]):\n  //     #   print(f\"• {accidentalCount:<3}{resultArray}\")\n\n  //     if accidentalCount < lowestCount:\n  //       lowestCount = accidentalCount\n  //       winner = resultArray\n\n  //   print(f\"{scaleName:<18}\", end=\"\"), print(*winner, sep=\", \")\n};","map":{"version":3,"names":["noteMatrix","positions","accTransform","a","Math","abs","pitchSpeller","scales","transpose","Object","keys","forEach","scaleName","startPositions","scaleLength","length","lowestCount","winner","undefined","i","sx","sy","resultArray","accidentalCount","j","x","matrixY","map","obj","number","transposedNote","indexY","indexOf","push","char","console","log"],"sources":["C:/Users/Levi/Desktop/portfolio/src/Chart/pitchSpeller.ts"],"sourcesContent":["const noteMatrix: Array<Array<{'number': number, 'char': string}>> = [\n  [{'number': 10,'char': 'C𝄫'}, {'number': 11,'char': 'C♭'}, {'number': 0, 'char': 'C'}, {'number': 1, 'char': 'C♯'}, {'number': 2, 'char': 'C𝄪'}],\n  [{'number': 0, 'char': 'D𝄫'}, {'number': 1, 'char': 'D♭'}, {'number': 2, 'char': 'D'}, {'number': 3, 'char': 'D♯'}, {'number': 4, 'char': 'D𝄪'}],\n  [{'number': 2, 'char': 'E𝄫'}, {'number': 3, 'char': 'E♭'}, {'number': 4, 'char': 'E'}, {'number': 5, 'char': 'E♯'}, {'number': 6, 'char': 'E𝄪'}],\n  [{'number': 3, 'char': 'F𝄫'}, {'number': 4, 'char': 'F♭'}, {'number': 5, 'char': 'F'}, {'number': 6, 'char': 'F♯'}, {'number': 7, 'char': 'F𝄪'}],\n  [{'number': 5, 'char': 'G𝄫'}, {'number': 6, 'char': 'G♭'}, {'number': 7, 'char': 'G'}, {'number': 8, 'char': 'G♯'}, {'number': 9, 'char': 'G𝄪'}],\n  [{'number': 7, 'char': 'A𝄫'}, {'number': 8, 'char': 'A♭'}, {'number': 9, 'char': 'A'}, {'number': 10,'char': 'A♯'}, {'number': 11,'char': 'A𝄪'}],\n  [{'number': 9, 'char': 'B𝄫'}, {'number': 10,'char': 'B♭'}, {'number': 11,'char': 'B'}, {'number': 0, 'char': 'B♯'}, {'number': 1, 'char': 'B𝄪'}],\n]\n\nconst positions: Array<Array<[number, number]>> = [\n  [[0,2], [6,3], [1,0]],\n  [[1,1], [0,3], [6,4]],\n  [[1,2], [2,0], [0,4]],\n  [[2,1], [1,3], [3,0]],\n  [[2,2], [3,1], [1,4]],\n  [[3,2], [2,3], [4,0]],\n  [[4,1], [3,3], [2,4]],\n  [[4,2], [5,0], [3,4]],\n  [[5,1], [4,3]],\n  [[5,2], [6,0], [4,4]],\n  [[6,1], [5,3], [0,0]],\n  [[6,2], [0,1], [5,4]],\n]\n\nconst accTransform = (a: number) => {\n  // Function transforms y-index in matrix to degree of accidental. e.g. [0,1,2,3,4] -> [2,1,0,1,2]\n  return Math.abs(a-2)\n}\n\nexport const pitchSpeller = (scales: {[key: string]: number[]}, transpose: number) => {\n  /*\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\n  */\n\n  Object.keys(scales).forEach(scaleName => {\n    const startPositions = positions[(scales[scaleName][0] + transpose) % 12]\n    const scaleLength = scales[scaleName].length\n\n    var lowestCount = 999\n    var winner = undefined\n\n    for (let i = 0; i < startPositions.length; i++) {\n      const [sx, sy] = startPositions[i]\n\n      // if (i > 1) break\n\n      const resultArray = [noteMatrix[sx][sy]['char']]\n      var accidentalCount = accTransform(sy)\n\n      for (let j = 1; j < scaleLength; j++) {\n        const x = (j+sx)%scaleLength\n\n        const matrixY = noteMatrix[x].map(obj => obj.number)\n        \n        const transposedNote = (scales[scaleName][j] + transpose) % 12\n        const indexY = matrixY.indexOf(transposedNote)\n        if (indexY === -1) {\n          accidentalCount = 999\n          break\n        } \n        resultArray.push(noteMatrix[x][indexY].char)\n        accidentalCount += accTransform(indexY)\n      }\n\n      if (accidentalCount < lowestCount) {\n        lowestCount = accidentalCount\n        winner = resultArray\n      }\n    }\n    console.log(scaleName, winner)\n  })\n\n  // for scaleName in scales:\n\n  //   if len(scales[scaleName]) != 7:\n  //     print(f\"{scaleName:<18}ERROR: Scale not heptatonic.\", end=\"\")\n  //     continue\n\n  //   # print(f\"{scaleName}:\")\n  //   startCoords = positions[(scales[scaleName][0]+ int(transpose)) % 12]\n  //   scaleLength = len(scales[scaleName])\n\n  //   lowestCount = 999\n  //   winner = None\n    \n  //   for i, (sx, sy) in enumerate(startCoords):\n  //     # iter possible starting coordinates\n\n  //     # third coordinate is generally not needed\n  //     # few scales start with a double accidental\n  //     if i > 1:\n  //       break\n\n  //     # noteRange = [(sx+1 + i) % 7 for i in range(6)]\n  //     noteRange = [(sx+1 + i) % scaleLength for i in range(scaleLength-1)]\n\n  //     resultArray = [noteMatrix[sx,sy]['char']]\n  //     accidentalCount = accTransform(sy)\n\n  //     for j, x in enumerate(noteRange):\n  //     # iter notes in scale (first skipped)\n  //       matrixY = [noteMatrix[x,k]['number'] for k in range(5)] \n  //       try:\n  //         indexY = matrixY.index((scales[scaleName][j+1] + int(transpose)) % 12)\n  //         resultArray.append(noteMatrix[x, indexY]['char'])\n  //         accidentalCount += accTransform(indexY)\n  //       except:\n  //         accidentalCount = 999\n  //         break\n\n  //     # if len(resultArray) >= len(scales[scaleName]):\n  //     #   print(f\"• {accidentalCount:<3}{resultArray}\")\n    \n  //     if accidentalCount < lowestCount:\n  //       lowestCount = accidentalCount\n  //       winner = resultArray\n\n  //   print(f\"{scaleName:<18}\", end=\"\"), print(*winner, sep=\", \")\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}