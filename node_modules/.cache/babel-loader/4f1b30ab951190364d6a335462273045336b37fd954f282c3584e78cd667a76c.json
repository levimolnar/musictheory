{"ast":null,"code":"import { numberMatrix, positions } from \"./modeData\";\nexport const getSpellingPath = recipe => {\n  const startingCoords = positions[recipe[0]];\n  let best = {\n    spellingPath: [],\n    accidentalCount: Infinity\n  };\n  startingCoords.forEach(([startX, _], i) => {\n    const xArray = Array.from({\n      length: recipe.length\n    }, (_, i) => (startX + i) % recipe.length);\n    let current = {\n      spellingPath: [],\n      accidentalCount: 0\n    };\n    for (let [j, x] of Object.entries(xArray)) {\n      const match = Object.entries(numberMatrix[x]).find(([_, number]) => number === recipe[+j]);\n      if (match) {\n        const [y] = match;\n        current.spellingPath.push([x, +y]);\n        current.accidentalCount += Math.abs(+y);\n      } else {\n        current.accidentalCount = Infinity;\n        break;\n      }\n      ;\n    }\n    if (current.accidentalCount < best.accidentalCount) {\n      best = {\n        ...current\n      };\n    }\n    ;\n  });\n  return best.spellingPath;\n};\nexport const getIntervalStrings = (recipe, chordLength) => {\n  const normalizeNote = n => (n % 12 + 12) % 12;\n  let intervalStrings = [];\n  for (let i = 0; i < recipe.length; i++) {\n    let string = \"\";\n    for (let j = 0; j < chordLength - 1; j++) {\n      const note1 = recipe[(i + 2 * j) % recipe.length];\n      const note2 = recipe[(i + 2 * (j + 1)) % recipe.length];\n      const interval = normalizeNote(note2 - note1);\n      string += String(interval);\n    }\n    ;\n    intervalStrings.push(string);\n  }\n  return intervalStrings;\n};\nexport const getNumerals = (recipe, reference) => {\n  // C lydian:\n  // 0  2  4  5  7  9  11\n  // 0  2  4  6  7  8  10\n  // 0  0  0  1  0  0  0\n\n  // C mixolydian:\n  // 0  2  4  5  7  9  11\n  // 0  2  4  5  7  9  10\n  // 0  0  0  0  0  0 -1\n\n  // F lydian:\n  // 6  8  10 11 1  3  5\n  // 6  8  10 0  1  3  5\n  // 0  0  0 -11 0  0  0   ==>   0  0  0  1  0  0  0   \n\n  // Db mixolydian:\n  // 1  3  5  6  8  10 0\n  // 1  3  5  6  8  10 11\n  // 0  0  0  0  0  0  11  ==>   0  0  0  0  0  0 -1\n\n  // 0,  1  =>  1\n  // 1,  0  => -1\n  // 11, 0  =>  1  (-11)\n  // 0, 11  => -1   (11)\n  // 10, 0  =>  2  (-10)\n  // 0, 10  => -2   (10)\n  // 11, 1  =>  2  (-10)\n  // 1, 11  => -2   (10)\n\n  const transformNumber = x => Math.abs(x) <= 6 ? x : x + (x > 0 ? -12 : 12);\n\n  // console.log( 1, transformNumber( 1 ));\n  // console.log(-1, transformNumber(-1 ));\n  // console.log( 1, transformNumber(-11));\n  // console.log(-1, transformNumber( 11));\n  // console.log( 2, transformNumber(-10));\n  // console.log(-2, transformNumber( 10));\n\n  const numerals = recipe.map((_, i) => transformNumber(recipe[i] - reference[i]));\n  console.log(numerals);\n};","map":{"version":3,"names":["numberMatrix","positions","getSpellingPath","recipe","startingCoords","best","spellingPath","accidentalCount","Infinity","forEach","startX","_","i","xArray","Array","from","length","current","j","x","Object","entries","match","find","number","y","push","Math","abs","getIntervalStrings","chordLength","normalizeNote","n","intervalStrings","string","note1","note2","interval","String","getNumerals","reference","transformNumber","numerals","map","console","log"],"sources":["D:/react_showcase/portfolio/src/Chart/modeFunctions.tsx"],"sourcesContent":["import { numberMatrix, positions } from \"./modeData\";\r\n\r\nexport const getSpellingPath = (recipe: number[]) => {\r\n  const startingCoords = positions[recipe[0]];\r\n\r\n  let best: {spellingPath: Array<[number, number]>, accidentalCount: number} = {spellingPath: [], accidentalCount: Infinity};\r\n\r\n  startingCoords.forEach(([startX, _], i) => {\r\n    const xArray = Array.from({length: recipe.length}, (_, i) => (startX + i) % (recipe.length));\r\n    let current: {spellingPath: Array<[number, number]>, accidentalCount: number} = {spellingPath: [], accidentalCount: 0};\r\n\r\n    for (let [j, x] of Object.entries(xArray)) {\r\n      const match = Object.entries(numberMatrix[x]).find(([_, number]) => number === recipe[+j]);\r\n      if (match) {\r\n        const [y] = match;\r\n        current.spellingPath.push([x, +y]);\r\n        current.accidentalCount += Math.abs(+y);\r\n      } else {\r\n        current.accidentalCount = Infinity;\r\n        break;\r\n      };\r\n    }\r\n\r\n    if (current.accidentalCount < best.accidentalCount) { best = {...current} };\r\n  }); \r\n\r\n  return best.spellingPath;\r\n}\r\n\r\nexport const getIntervalStrings = (recipe: number[], chordLength: number) => {\r\n  const normalizeNote = (n: number) => (n % 12 + 12) % 12;\r\n\r\n  let intervalStrings = [];\r\n\r\n  for (let i = 0; i < recipe.length; i++) {\r\n\r\n    let string = \"\";\r\n\r\n    for (let j = 0; j < (chordLength - 1); j++) {\r\n      const note1 = recipe[(i + 2*j) % recipe.length];\r\n      const note2 = recipe[(i + 2*(j+1)) % recipe.length];\r\n      const interval = normalizeNote(note2 - note1);\r\n      string += String(interval);\r\n    };\r\n\r\n    intervalStrings.push(string);\r\n  }\r\n\r\n  return intervalStrings;\r\n}\r\n\r\nexport const getNumerals = (recipe: number[], reference: number[]) => {\r\n  // C lydian:\r\n  // 0  2  4  5  7  9  11\r\n  // 0  2  4  6  7  8  10\r\n  // 0  0  0  1  0  0  0\r\n\r\n  // C mixolydian:\r\n  // 0  2  4  5  7  9  11\r\n  // 0  2  4  5  7  9  10\r\n  // 0  0  0  0  0  0 -1\r\n\r\n  // F lydian:\r\n  // 6  8  10 11 1  3  5\r\n  // 6  8  10 0  1  3  5\r\n  // 0  0  0 -11 0  0  0   ==>   0  0  0  1  0  0  0   \r\n\r\n  // Db mixolydian:\r\n  // 1  3  5  6  8  10 0\r\n  // 1  3  5  6  8  10 11\r\n  // 0  0  0  0  0  0  11  ==>   0  0  0  0  0  0 -1\r\n\r\n  // 0,  1  =>  1\r\n  // 1,  0  => -1\r\n  // 11, 0  =>  1  (-11)\r\n  // 0, 11  => -1   (11)\r\n  // 10, 0  =>  2  (-10)\r\n  // 0, 10  => -2   (10)\r\n  // 11, 1  =>  2  (-10)\r\n  // 1, 11  => -2   (10)\r\n\r\n  const transformNumber = (x: number) => (Math.abs(x) <= 6) ? x : x + ((x > 0) ? -12 : 12);\r\n\r\n  // console.log( 1, transformNumber( 1 ));\r\n  // console.log(-1, transformNumber(-1 ));\r\n  // console.log( 1, transformNumber(-11));\r\n  // console.log(-1, transformNumber( 11));\r\n  // console.log( 2, transformNumber(-10));\r\n  // console.log(-2, transformNumber( 10));\r\n\r\n  const numerals = recipe.map((_, i) => transformNumber(recipe[i] - reference[i]));\r\n  console.log(numerals);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}