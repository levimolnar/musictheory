{"ast":null,"code":"// This file was mostly written by chatGPT\n\nexport default class ChordTrie {\n  constructor() {\n    this.root = void 0;\n    this.root = {\n      children: {},\n      isChordEnd: false,\n      chordType: null\n    };\n  }\n  insertChord(intervals, chordType) {\n    let currentNode = this.root;\n    for (const interval of intervals) {\n      if (!currentNode.children[interval]) {\n        currentNode.children[interval] = {\n          children: {},\n          isChordEnd: false,\n          chordType: null\n        };\n      }\n      currentNode = currentNode.children[interval];\n    }\n    currentNode.isChordEnd = true;\n    currentNode.chordType = chordType;\n  }\n  findChord(intervals) {\n    let currentNode = this.root;\n    for (const interval of intervals) {\n      if (!currentNode.children[interval]) {\n        return null; // Chord not found\n      }\n\n      currentNode = currentNode.children[interval];\n    }\n    return currentNode.isChordEnd ? currentNode.chordType : null;\n  }\n}\n\n// // Example usage:\n// const chordTrie = new ChordTrie();\n\n// // Inserting chords\n// chordTrie.insertChord([4, 3, 4], 'Major 7th');\n// chordTrie.insertChord([3, 4, 3], 'Minor 7th');\n// // Add more chords as needed\n\n// // Finding chords\n// const result1 = chordTrie.findChord([4, 3, 4]); // Should return 'Major 7th'\n// const result2 = chordTrie.findChord([3, 4, 3]); // Should return 'Minor 7th'\n// const result3 = chordTrie.findChord([4, 3, 5]); // Should return null (Chord not found)\n\n// console.log(result1);\n// console.log(result2);\n// console.log(result3);","map":{"version":3,"names":["ChordTrie","constructor","root","children","isChordEnd","chordType","insertChord","intervals","currentNode","interval","findChord"],"sources":["D:/react_showcase/portfolio/src/Chart/chordTrie.tsx"],"sourcesContent":["// This file was mostly written by chatGPT\r\n\r\ninterface ChordTrieNode {\r\n  children: { [interval: number]: ChordTrieNode };\r\n  isChordEnd: boolean;\r\n  chordType: string | null;\r\n}\r\n\r\nexport default class ChordTrie {\r\n  root: ChordTrieNode;\r\n\r\n  constructor() {\r\n    this.root = { children: {}, isChordEnd: false, chordType: null };\r\n  }\r\n\r\n  insertChord(intervals: number[], chordType: string) {\r\n    let currentNode: ChordTrieNode = this.root;\r\n\r\n    for (const interval of intervals) {\r\n      if (!currentNode.children[interval]) {\r\n        currentNode.children[interval] = { children: {}, isChordEnd: false, chordType: null };\r\n      }\r\n      currentNode = currentNode.children[interval];\r\n    }\r\n\r\n    currentNode.isChordEnd = true;\r\n    currentNode.chordType = chordType;\r\n  }\r\n\r\n  findChord(intervals: number[]): string | null {\r\n    let currentNode: ChordTrieNode = this.root;\r\n\r\n    for (const interval of intervals) {\r\n      if (!currentNode.children[interval]) {\r\n        return null; // Chord not found\r\n      }\r\n      currentNode = currentNode.children[interval];\r\n    }\r\n\r\n    return currentNode.isChordEnd ? currentNode.chordType : null;\r\n  }\r\n}\r\n\r\n// // Example usage:\r\n// const chordTrie = new ChordTrie();\r\n\r\n// // Inserting chords\r\n// chordTrie.insertChord([4, 3, 4], 'Major 7th');\r\n// chordTrie.insertChord([3, 4, 3], 'Minor 7th');\r\n// // Add more chords as needed\r\n\r\n// // Finding chords\r\n// const result1 = chordTrie.findChord([4, 3, 4]); // Should return 'Major 7th'\r\n// const result2 = chordTrie.findChord([3, 4, 3]); // Should return 'Minor 7th'\r\n// const result3 = chordTrie.findChord([4, 3, 5]); // Should return null (Chord not found)\r\n\r\n// console.log(result1);\r\n// console.log(result2);\r\n// console.log(result3);"],"mappings":"AAAA;;AAQA,eAAe,MAAMA,SAAS,CAAC;EAG7BC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI;IAGF,IAAI,CAACA,IAAI,GAAG;MAAEC,QAAQ,EAAE,CAAC,CAAC;MAAEC,UAAU,EAAE,KAAK;MAAEC,SAAS,EAAE;IAAK,CAAC;EAClE;EAEAC,WAAWA,CAACC,SAAmB,EAAEF,SAAiB,EAAE;IAClD,IAAIG,WAA0B,GAAG,IAAI,CAACN,IAAI;IAE1C,KAAK,MAAMO,QAAQ,IAAIF,SAAS,EAAE;MAChC,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACM,QAAQ,CAAC,EAAE;QACnCD,WAAW,CAACL,QAAQ,CAACM,QAAQ,CAAC,GAAG;UAAEN,QAAQ,EAAE,CAAC,CAAC;UAAEC,UAAU,EAAE,KAAK;UAAEC,SAAS,EAAE;QAAK,CAAC;MACvF;MACAG,WAAW,GAAGA,WAAW,CAACL,QAAQ,CAACM,QAAQ,CAAC;IAC9C;IAEAD,WAAW,CAACJ,UAAU,GAAG,IAAI;IAC7BI,WAAW,CAACH,SAAS,GAAGA,SAAS;EACnC;EAEAK,SAASA,CAACH,SAAmB,EAAiB;IAC5C,IAAIC,WAA0B,GAAG,IAAI,CAACN,IAAI;IAE1C,KAAK,MAAMO,QAAQ,IAAIF,SAAS,EAAE;MAChC,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACM,QAAQ,CAAC,EAAE;QACnC,OAAO,IAAI,CAAC,CAAC;MACf;;MACAD,WAAW,GAAGA,WAAW,CAACL,QAAQ,CAACM,QAAQ,CAAC;IAC9C;IAEA,OAAOD,WAAW,CAACJ,UAAU,GAAGI,WAAW,CAACH,SAAS,GAAG,IAAI;EAC9D;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}