{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { DndContext, DragOverlay, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  // const [items, setItems] = useState<Array<{id: string, char: string, type: string, num: string}>>([\n  //   {id: 'id2', char: 'D', type: 'min', num: 'ii'},\n  //   {id: 'id5', char: 'G', type: 'maj', num: 'V'},\n  //   {id: 'id1', char: 'C', type: 'maj', num: 'I'},\n  // ]);\n\n  const [dragId, setDragId] = useState(undefined);\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    // console.log(active, over);\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return;\n    }\n    ;\n    console.log('items: ', over.data.current.sortable.items);\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n\n      // console.log('overCurrent: ',  over.data.current);\n      console.log('over: ', over);\n      const {\n        index: newIndex,\n        containerId: newContainerId\n      } = over.data.current.sortable;\n      const duplicateIndex = over.data.current.items.findIndex(i => i.id === dragId);\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        over.data.current.setItems(items => [...items, {\n          ...payload,\n          id: dragId\n        }]);\n\n        // setMatrix((matrix) => matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n      } else {\n        over.data.current.setItems(items => arrayMove(items, duplicateIndex, newIndex));\n      }\n      ;\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n        const oldIndex = active.data.current.sortable.index;\n        over.data.current.setItems(items => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n        return;\n      }\n      ;\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return;\n    }\n    ;\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n      over.data.current.setItems(items => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <ProgContext.Provider value={{items: items}}>\n    _jsxDEV(DndContext, {\n      onDragStart: ({\n        active\n      }) => {\n        setDragId(active.id);\n      },\n      onDragCancel: () => {\n        setDragId(undefined);\n      },\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      collisionDetection: rectIntersection,\n      children: [children, /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cardContent maj\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cardNumber\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cardText\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n    // </ProgContext.Provider>\n  );\n};\n_s(ModeContext, \"VklefMBRAMgoIxvdBTZLS8MTzrg=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","DndContext","DragOverlay","rectIntersection","arrayMove","jsxDEV","_jsxDEV","ProgContext","undefined","ModeContext","children","_s","dragId","setDragId","handleDragOver","active","over","data","current","console","log","sortable","items","payload","index","newIndex","containerId","newContainerId","duplicateIndex","findIndex","i","id","setItems","handleDragEnd","oldIndex","slice","concat","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\n\n\nexport const ProgContext = createContext<any>(undefined);\n\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  // const [items, setItems] = useState<Array<{id: string, char: string, type: string, num: string}>>([\n  //   {id: 'id2', char: 'D', type: 'min', num: 'ii'},\n  //   {id: 'id5', char: 'G', type: 'maj', num: 'V'},\n  //   {id: 'id1', char: 'C', type: 'maj', num: 'I'},\n  // ]);\n\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\n\n\n  const handleDragOver = ({active, over}: any) => {\n\n    // console.log(active, over);\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return\n    };\n\n    console.log('items: ', over.data.current.sortable.items);\n\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n\n      // console.log('overCurrent: ',  over.data.current);\n      console.log('over: ',  over);\n\n      const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n      const duplicateIndex = over.data.current.items.findIndex((i: any) => i.id === dragId);\n      \n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        over.data.current.setItems((items: any) => [...items, {...payload, id: dragId}]);\n\n        // setMatrix((matrix) => matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      } else {\n        over.data.current.setItems((items: any) => arrayMove(items, duplicateIndex, newIndex));\n      };\n      \n      return\n    };\n  }\n\n\n  const handleDragEnd = ({active, over}: any) => {\n\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n\n        const oldIndex = active.data.current.sortable.index;\n        over.data.current.setItems((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        return\n      };\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return\n    };\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      over.data.current.setItems((items: any) => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n\n  return (\n    // <ProgContext.Provider value={{items: items}}>\n      <DndContext\n        onDragStart={({active}: any) => {setDragId(active.id)}}\n        onDragCancel={() => {setDragId(undefined)}}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n        collisionDetection={rectIntersection}\n      >\n        {children}\n        <DragOverlay>\n          <div className='cardContent maj'>\n            <div className='cardNumber'></div>\n            <div className='cardText'></div>\n          </div>\n        </DragOverlay>\n      </DndContext>\n    // </ProgContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}