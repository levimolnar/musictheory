{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DndContext, DragOverlay, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [dragId, setDragId] = useState(undefined);\n  const [payloadStorage, setPayloadStorage] = useState(undefined);\n  const [dragOverEnabled, setDragOverEnabled] = useState(true);\n  function dragOverCooldown() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('resolved');\n      }, 2000);\n    });\n  }\n  const handleDragStart = ({\n    active\n  }) => {\n    // console.log({activeStart: active});\n\n    setDragId(active.id);\n    if (active.data.current.payload) {\n      setPayloadStorage(active.data.current.payload);\n    }\n    ;\n  };\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) return;\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      // console.log({activeDO: active})\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        console.log('remove from sortable');\n\n        // remove based on index, could remove wrong card.\n\n        // const oldIndex = active.data.current.payload.index;\n        // active.data.current.payload.setFunc((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        // remove based on ID, cannot remove wrong card.\n\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n        active.data.current.payload.setFunc(items => new Set([...items].filter(chord => chord.id !== active.data.current.payload.chord.id)));\n        return;\n      }\n      ;\n      return;\n    }\n    ;\n    if (payloadStorage.chord) {\n      // if (active.data.current.sortable) {\n      console.log('add to sortable / swap');\n\n      // const chord = active.data.current.payload.chord;\n      const chord = payloadStorage.chord;\n      const {\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      const setItemsFunc = over.data.current.payload.setFunc;\n\n      // const duplicateIndex = items.findIndex((i: any) => i.id === dragId);\n      const duplicateIndex = items.findIndex(id => id === dragId);\n      console.log(duplicateIndex);\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable        \n        // setItemsFunc((items: any) => items.toSpliced(newIndex, 0, {...chord, id: dragId}));\n\n        // @ts-ignore\n        setItemsFunc(items => new Set([...items].toSpliced(newIndex, 0, {\n          ...chord,\n          id: dragId\n        })));\n      } else {\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n        setItemsFunc(items => new Set(arrayMove([...items], duplicateIndex, newIndex)));\n      }\n      ;\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on any drop\n      payloadStorage.setFunc(prevScales => {\n        const newScales = {\n          ...prevScales\n        };\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n        return newScales;\n      });\n    }\n    if (!over) return;\n    console.log(payloadStorage);\n    if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n      over.data.current.payload.setFunc(items => new Set(arrayMove([...items], oldIndex, newIndex)));\n      return;\n    }\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      console.log('chart -> sortable');\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: handleDragStart,\n    onDragCancel: () => {\n      setDragId(undefined);\n      setPayloadStorage(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    collisionDetection: rectIntersection,\n    children: [children, payloadStorage ? /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(NoteCard, {\n        chord: payloadStorage.chord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"pGICo7RxkpRbKcSVbe+s7DT0ZWo=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","v4","uuidv4","DndContext","DragOverlay","rectIntersection","arrayMove","NoteCard","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgContext","undefined","ModeContext","children","_s","dragId","setDragId","payloadStorage","setPayloadStorage","dragOverEnabled","setDragOverEnabled","dragOverCooldown","Promise","resolve","setTimeout","handleDragStart","active","id","data","current","payload","handleDragOver","over","sortable","console","log","setFunc","items","Set","filter","chord","index","newIndex","setItemsFunc","duplicateIndex","findIndex","toSpliced","handleDragEnd","origin","prevScales","newScales","chordDir","scale","oldIndex","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\n\n\nexport const ProgContext = createContext<any>(undefined);\n\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\n  const [payloadStorage, setPayloadStorage] = useState<any | undefined>(undefined);\n\n  const [dragOverEnabled, setDragOverEnabled] = useState<boolean>(true);\n\n  function dragOverCooldown() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve('resolved');\n      }, 2000);\n    });\n  }\n\n  const handleDragStart = ({active}: any) => {\n\n    // console.log({activeStart: active});\n\n    setDragId(active.id); \n    if (active.data.current.payload) { setPayloadStorage(active.data.current.payload) };\n  }\n\n  const handleDragOver = ({active, over}: any) => {\n\n    if (!payloadStorage) return;\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      // console.log({activeDO: active})\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        console.log('remove from sortable');\n\n        // remove based on index, could remove wrong card.\n\n        // const oldIndex = active.data.current.payload.index;\n        // active.data.current.payload.setFunc((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        // remove based on ID, cannot remove wrong card.\n\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n        active.data.current.payload.setFunc((items: any) => new Set([...items].filter((chord: any) => chord.id !== active.data.current.payload.chord.id)));\n\n        return\n      };\n\n      return\n    };\n\n    if (payloadStorage.chord) {\n    // if (active.data.current.sortable) {\n        console.log('add to sortable / swap');\n\n      // const chord = active.data.current.payload.chord;\n      const chord = payloadStorage.chord;\n      const {index: newIndex, items } = over.data.current.sortable;\n      const setItemsFunc = over.data.current.payload.setFunc;\n\n      // const duplicateIndex = items.findIndex((i: any) => i.id === dragId);\n      const duplicateIndex = items.findIndex((id: any) => id === dragId);\n      console.log(duplicateIndex);\n      \n      if (duplicateIndex === -1) {\n        // dragId not already in sortable        \n        // setItemsFunc((items: any) => items.toSpliced(newIndex, 0, {...chord, id: dragId}));\n\n        // @ts-ignore\n        setItemsFunc((items: any) => new Set([...items].toSpliced(newIndex, 0, {...chord, id: dragId})));\n\n      } else {\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n        setItemsFunc((items: any) => new Set(arrayMove([...items], duplicateIndex, newIndex)));\n      };\n\n      return\n    };\n  }\n\n\n  const handleDragEnd = ({active, over}: any) => {\n    \n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on any drop\n      payloadStorage.setFunc((prevScales: any) => {\n        const newScales = {...prevScales};\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n        return newScales;\n      });\n    }\n\n    if (!over) return;\n\n    console.log(payloadStorage);\n\n    if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n      over.data.current.payload.setFunc((items: any) => new Set(arrayMove([...items], oldIndex, newIndex)));\n      return\n    }\n\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      console.log('chart -> sortable')\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return\n    }\n  };\n\n\n  return (\n    <DndContext\n      onDragStart={handleDragStart}\n      onDragCancel={() => {\n        setDragId(undefined); \n        setPayloadStorage(undefined);\n      }}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n      collisionDetection={rectIntersection}\n    >\n      {children}\n      {payloadStorage ? <DragOverlay><NoteCard chord={payloadStorage.chord}/></DragOverlay> : <></>}\n    </DndContext>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}