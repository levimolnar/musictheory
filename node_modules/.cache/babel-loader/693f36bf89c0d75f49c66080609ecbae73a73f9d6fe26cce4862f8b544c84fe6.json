{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [dragId, setDragId] = useState(undefined);\n  const [payloadStorage, setPayloadStorage] = useState(undefined);\n  const [blocked, setBlocked] = useState(false);\n  const [throttled, setThrottled] = useState(false);\n  const throttle = () => {\n    setThrottled(true);\n    setTimeout(() => {\n      setThrottled(false);\n    }, 100);\n  };\n  const handleDragStart = ({\n    active\n  }) => {\n    setBlocked(false);\n    setThrottled(false);\n    setDragId(active.id);\n    if (active.data.current.payload) setPayloadStorage(active.data.current.payload);\n  };\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) return;\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        // console.log('remove from sortable');\n\n        // remove based on ID, can't remove wrong index.\n        active.data.current.payload.setFunc(items => items.filter(chord => chord.id !== active.data.current.payload.chord.id));\n        setBlocked(false);\n        throttle();\n        return;\n      }\n      ;\n      return;\n    }\n    ;\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\n      // in case sortables are next to eachother and draggable does not meet !over, still remove item.\n\n      active.data.current.payload.setFunc(items => items.filter(chord => chord.id !== active.data.current.payload.chord.id));\n      setBlocked(false);\n      throttle();\n      return;\n    }\n    ;\n    if (payloadStorage.chord && !throttled) {\n      const {\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      const setItemsFunc = over.data.current.payload.setFunc;\n      const duplicateIndex = items.findIndex(id => id === dragId);\n      if (duplicateIndex === -1 && !blocked) {\n        // console.log('add to sortable');\n\n        setItemsFunc(items => [...items.slice(0, newIndex), {\n          ...payloadStorage.chord,\n          id: dragId\n        }, ...items.slice(newIndex)]);\n        setBlocked(true);\n        throttle();\n        return;\n      } else {\n        // console.log('swap cards');\n\n        setItemsFunc(items => arrayMove(items, duplicateIndex, newIndex));\n        throttle();\n        return;\n      }\n      ;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on in any case\n      payloadStorage.setFunc(prevScales => {\n        const newScales = {\n          ...prevScales\n        };\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n        return newScales;\n      });\n    }\n    if (!over) return;\n\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\n      // console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index; // !\n      const newIndex = over.data.current.sortable.index;\n      over.data.current.payload.setFunc(items => arrayMove(items, oldIndex, newIndex));\n      // over.data.current.payload.setFunc((items: any) => new Set(arrayMove([...items], oldIndex, newIndex)));\n      return;\n    }\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      // console.log('chart -> sortable')\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: handleDragStart,\n    onDragCancel: () => {\n      setDragId(undefined);\n      setPayloadStorage(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    children: [children, payloadStorage ? /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(NoteCard, {\n        chord: payloadStorage.chord,\n        seventh: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"K7+OEM0/i5NekS0IGmcmlNBkcoE=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","v4","uuidv4","DndContext","DragOverlay","arrayMove","NoteCard","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgContext","undefined","ModeContext","children","_s","dragId","setDragId","payloadStorage","setPayloadStorage","blocked","setBlocked","throttled","setThrottled","throttle","setTimeout","handleDragStart","active","id","data","current","payload","handleDragOver","over","sortable","setFunc","items","filter","chord","hasOwnProperty","containerId","index","newIndex","setItemsFunc","duplicateIndex","findIndex","slice","handleDragEnd","origin","prevScales","newScales","chordDir","scale","oldIndex","onDragStart","onDragCancel","onDragOver","onDragEnd","seventh","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { DndContext, DragOverlay, useDraggable, useDroppable } from '@dnd-kit/core';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\r\nimport { NoteCard } from '../NoteCard';\r\n\r\nexport const ProgContext = createContext<any>(undefined);\r\n\r\nexport const ModeContext = ({children}: {children: any}) => {\r\n\r\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\r\n  const [payloadStorage, setPayloadStorage] = useState<any | undefined>(undefined);\r\n  const [blocked, setBlocked] = useState<boolean>(false);\r\n  const [throttled, setThrottled] = useState<boolean>(false);\r\n\r\n  const throttle = () => {\r\n    setThrottled(true);\r\n    setTimeout(() => {\r\n      setThrottled(false);\r\n    }, 100);\r\n  };\r\n\r\n  const handleDragStart = ({active}: any) => {\r\n    setBlocked(false);\r\n    setThrottled(false);\r\n    setDragId(active.id); \r\n    if (active.data.current.payload) setPayloadStorage(active.data.current.payload);\r\n  }\r\n\r\n  const handleDragOver = ({active, over}: any) => {\r\n\r\n    if (!payloadStorage) return;\r\n\r\n    if (!over || !over.data.current) {\r\n      // if object hovered over is not drop zone\r\n\r\n      if (active.data.current.sortable) {\r\n        // if from sortable, remove card at index from sortable\r\n        // console.log('remove from sortable');\r\n\r\n        // remove based on ID, can't remove wrong index.\r\n        active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\r\n\r\n        setBlocked(false);\r\n        throttle();\r\n        return\r\n      };\r\n\r\n      return\r\n    };\r\n\r\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\r\n      // in case sortables are next to eachother and draggable does not meet !over, still remove item.\r\n\r\n      active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\r\n\r\n      setBlocked(false);\r\n      throttle();\r\n      return\r\n    };\r\n\r\n    if (payloadStorage.chord && !throttled) {\r\n\r\n      const {index: newIndex, items } = over.data.current.sortable;\r\n      const setItemsFunc = over.data.current.payload.setFunc;\r\n\r\n      const duplicateIndex = items.findIndex((id: any) => id === dragId);\r\n      \r\n      if (duplicateIndex === -1 && !blocked) {\r\n        // console.log('add to sortable');\r\n\r\n        setItemsFunc((items: any) => [...items.slice(0, newIndex), {...payloadStorage.chord, id: dragId}, ...items.slice(newIndex)]);\r\n\r\n        setBlocked(true);\r\n        throttle();\r\n        return;\r\n\r\n      } else {\r\n        // console.log('swap cards');\r\n        \r\n        setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\r\n\r\n        throttle();\r\n        return;\r\n      };\r\n    };\r\n  }\r\n\r\n  const handleDragEnd = ({active, over}: any) => {\r\n\r\n    if (payloadStorage.origin === 'chart') {\r\n      // reset id of dragged chart item on in any case\r\n      payloadStorage.setFunc((prevScales: any) => {\r\n        const newScales = {...prevScales};\r\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\r\n        return newScales;\r\n      });\r\n    }\r\n\r\n    if (!over) return;\r\n\r\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\r\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\r\n\r\n      // console.log('sortable -> sortable')\r\n\r\n      const oldIndex = active.data.current.sortable.index;  // !\r\n      const newIndex = over.data.current.sortable.index;\r\n\r\n      over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\r\n      // over.data.current.payload.setFunc((items: any) => new Set(arrayMove([...items], oldIndex, newIndex)));\r\n      return\r\n    }\r\n\r\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\r\n      // console.log('chart -> sortable')\r\n\r\n      // payloadStorage.setFunc((prevScales: any) => {\r\n      //   const newScales = {...prevScales};\r\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\r\n      //   return newScales;\r\n      // });\r\n\r\n      return\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <DndContext\r\n      onDragStart={handleDragStart}\r\n      onDragCancel={() => {\r\n        setDragId(undefined); \r\n        setPayloadStorage(undefined);\r\n      }}\r\n      onDragOver={handleDragOver}\r\n      onDragEnd={handleDragEnd}\r\n    >\r\n      {children}\r\n      {payloadStorage ? <DragOverlay><NoteCard chord={payloadStorage.chord} seventh={true}/></DragOverlay> : <></>}\r\n    </DndContext>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}