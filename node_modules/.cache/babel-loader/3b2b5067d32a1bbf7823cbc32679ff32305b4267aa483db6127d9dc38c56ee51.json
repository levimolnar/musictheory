{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\n// import { CSS } from '@dnd-kit/utilities';\n// import { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [payloadStorage, setPayloadStorage] = useState(undefined);\n  const [blocked, setBlocked] = useState(false);\n  const [throttled, setThrottled] = useState(false);\n  const throttle = ms => {\n    setThrottled(true);\n    setTimeout(() => {\n      setThrottled(false);\n    }, ms);\n  };\n  const handleDragStart = ({\n    active\n  }) => {\n    setBlocked(false);\n    setThrottled(false);\n    if (active.data.current.payload) {\n      setPayloadStorage(active.data.current.payload);\n    }\n    ;\n  };\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) {\n      return;\n    }\n    ;\n    if (!over || !over.data.current) {\n      // if object hovered is not a droppable zone\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n\n        const {\n          remove: itemRemove\n        } = active.data.current.payload.setFunc;\n        const activeContainerId = active.data.current.sortable.containerId;\n        itemRemove(activeContainerId, active.data.current.payload.chord.id);\n        setBlocked(false);\n        throttle(100);\n        return;\n      } else {\n        return;\n      }\n      ;\n    }\n    ;\n\n    // possibly redundant! try to incorporate!\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\n      // fix issue where dragging from sortables next to eachother won't encounter '!over', thus won't remove item.\n\n      const {\n        remove: itemRemove\n      } = active.data.current.payload.setFunc;\n      const activeContainerId = active.data.current.sortable.containerId;\n      itemRemove(activeContainerId, active.data.current.payload.chord.id);\n      setBlocked(false);\n      throttle(100);\n      return;\n    }\n    ;\n    if (payloadStorage.chord && !throttled) {\n      const {\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      const {\n        add: itemAdd,\n        swap: itemSwap\n      } = over.data.current.payload.setFunc;\n      const containerId = over.data.current.sortable.containerId;\n      const duplicateIndex = items.findIndex(id => id === payloadStorage.chord.id);\n      if (duplicateIndex === -1 && !blocked) {\n        itemAdd(containerId, newIndex, {\n          ...payloadStorage.chord,\n          seventh: payloadStorage.seventh,\n          id: payloadStorage.chord.id\n        });\n        setBlocked(true);\n        throttle(100);\n        return;\n      } else {\n        // itemSwap(containerId, duplicateIndex, newIndex);\n        // throttle(100);\n        // setBlocked(true);\n        return;\n      }\n      ;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) {\n      return;\n    }\n    ;\n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item to prevent copies\n      payloadStorage.setFunc(prevScales => {\n        const newScales = [...prevScales];\n        newScales[payloadStorage.index].id = uuidv4();\n        return newScales;\n      });\n    }\n    ;\n    if (!active.data.current.payload) {\n      return;\n    }\n    ; // can occur in between progBars\n    if (!over) {\n      return;\n    }\n    ;\n\n    // correct swap to wrong index\n    if (active.data.current.payload.index !== over.data.current.payload.index) {\n      const {\n        swap: itemSwap\n      } = over.data.current.payload.setFunc;\n      const containerId = over.data.current.sortable.containerId;\n      console.log(active.data.current.payload.index, over.data.current.payload.index);\n      itemSwap(containerId, active.data.current.payload.index, over.data.current.payload.index);\n    }\n    ;\n\n    // const {add: itemAdd} = over.data.current.payload.setFunc;\n    // const containerId = over.data.current.sortable.containerId;\n    // const newIndex = over.data.current.payload.index;\n    // itemAdd(containerId, newIndex, {...payloadStorage.chord, seventh: payloadStorage.seventh, id: payloadStorage.chord.id});\n  };\n\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: handleDragStart,\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    onDragCancel: handleDragEnd,\n    children: [children, payloadStorage ? /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(NoteCard, {\n        chord: payloadStorage.chord,\n        seventh: payloadStorage.seventh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"RPO9+hD3kYdHHZgWD1HdlahkhNg=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","v4","uuidv4","DndContext","DragOverlay","NoteCard","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgContext","undefined","ModeContext","children","_s","payloadStorage","setPayloadStorage","blocked","setBlocked","throttled","setThrottled","throttle","ms","setTimeout","handleDragStart","active","data","current","payload","handleDragOver","over","sortable","remove","itemRemove","setFunc","activeContainerId","containerId","chord","id","hasOwnProperty","index","newIndex","items","add","itemAdd","swap","itemSwap","duplicateIndex","findIndex","seventh","handleDragEnd","origin","prevScales","newScales","console","log","onDragStart","onDragOver","onDragEnd","onDragCancel","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { DndContext, DragOverlay, useDraggable, useDroppable } from '@dnd-kit/core';\r\n// import { CSS } from '@dnd-kit/utilities';\r\n// import { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\r\nimport { NoteCard } from '../NoteCard';\r\nimport { Payload } from '../types';\r\n\r\nexport const ProgContext = createContext<any>(undefined);\r\n\r\nexport const ModeContext = ({children}: {children: any}) => {\r\n\r\n  const [payloadStorage, setPayloadStorage] = useState<Payload | undefined>(undefined);\r\n  const [blocked, setBlocked] = useState<boolean>(false);\r\n  const [throttled, setThrottled] = useState<boolean>(false);\r\n\r\n  const throttle = (ms: number) => {\r\n    setThrottled(true);\r\n    setTimeout(() => {\r\n      setThrottled(false);\r\n    }, ms);\r\n  };\r\n\r\n  const handleDragStart = ({active}: any) => {\r\n    setBlocked(false);\r\n    setThrottled(false);\r\n    if (active.data.current.payload) { setPayloadStorage(active.data.current.payload) };\r\n  }\r\n\r\n  const handleDragOver = ({active, over}: any) => {\r\n    if (!payloadStorage) { return };\r\n\r\n    if (!over || !over.data.current) {\r\n      // if object hovered is not a droppable zone\r\n\r\n      if (active.data.current.sortable) {\r\n        // if from sortable, remove card at index from sortable\r\n\r\n        const {remove: itemRemove} = active.data.current.payload.setFunc;\r\n        const activeContainerId = active.data.current.sortable.containerId;\r\n        itemRemove(activeContainerId, active.data.current.payload.chord.id);\r\n\r\n        setBlocked(false);\r\n        throttle(100);\r\n        return\r\n        \r\n      } else { return };\r\n    };\r\n\r\n    // possibly redundant! try to incorporate!\r\n    if (active.data.current.hasOwnProperty(\"sortable\") && active.data.current.sortable.containerId !== over.data.current.sortable.containerId) {\r\n      // fix issue where dragging from sortables next to eachother won't encounter '!over', thus won't remove item.\r\n\r\n      const {remove: itemRemove} = active.data.current.payload.setFunc;\r\n      const activeContainerId = active.data.current.sortable.containerId;\r\n      itemRemove(activeContainerId, active.data.current.payload.chord.id);\r\n\r\n      setBlocked(false);\r\n      throttle(100);\r\n      return\r\n    };\r\n\r\n    if (payloadStorage.chord && !throttled) {\r\n\r\n      const {index: newIndex, items } = over.data.current.sortable;\r\n      const {add: itemAdd, swap: itemSwap} = over.data.current.payload.setFunc;\r\n      const containerId = over.data.current.sortable.containerId;\r\n\r\n      const duplicateIndex = items.findIndex((id: any) => id === payloadStorage.chord.id);\r\n      \r\n      if (duplicateIndex === -1 && !blocked) {\r\n        itemAdd(containerId, newIndex, {...payloadStorage.chord, seventh: payloadStorage.seventh, id: payloadStorage.chord.id});\r\n        setBlocked(true);\r\n        throttle(100);\r\n        return;\r\n      } else {\r\n        // itemSwap(containerId, duplicateIndex, newIndex);\r\n        // throttle(100);\r\n        // setBlocked(true);\r\n        return;\r\n      };\r\n    };\r\n  }\r\n\r\n  const handleDragEnd = ({active, over}: any) => {\r\n\r\n    if (!payloadStorage) { return };\r\n    if (payloadStorage.origin === 'chart') {\r\n      // reset id of dragged chart item to prevent copies\r\n      payloadStorage.setFunc((prevScales: Array<{id: string, root: string, type: {full: string, short: string, symbol: string}, num: string}>) => {\r\n        const newScales = [...prevScales];\r\n        newScales[payloadStorage.index].id = uuidv4();\r\n        return newScales;\r\n      });\r\n    };\r\n\r\n    if (!active.data.current.payload) { return }; // can occur in between progBars\r\n    if (!over) { return };\r\n    \r\n    // correct swap to wrong index\r\n    if (active.data.current.payload.index !== over.data.current.payload.index) {\r\n      const {swap: itemSwap} = over.data.current.payload.setFunc;\r\n      const containerId = over.data.current.sortable.containerId;\r\n\r\n      console.log(active.data.current.payload.index, over.data.current.payload.index);\r\n      itemSwap(containerId, active.data.current.payload.index, over.data.current.payload.index);\r\n    };\r\n\r\n    // const {add: itemAdd} = over.data.current.payload.setFunc;\r\n    // const containerId = over.data.current.sortable.containerId;\r\n    // const newIndex = over.data.current.payload.index;\r\n    // itemAdd(containerId, newIndex, {...payloadStorage.chord, seventh: payloadStorage.seventh, id: payloadStorage.chord.id});\r\n  };\r\n\r\n\r\n  return (\r\n    <DndContext\r\n      onDragStart={handleDragStart}\r\n      onDragOver={handleDragOver}\r\n      onDragEnd={handleDragEnd}\r\n      onDragCancel={handleDragEnd}\r\n    >\r\n      {children}\r\n      {payloadStorage ? <DragOverlay><NoteCard chord={payloadStorage.chord} seventh={payloadStorage.seventh}/></DragOverlay> : <></>}\r\n    </DndContext>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}