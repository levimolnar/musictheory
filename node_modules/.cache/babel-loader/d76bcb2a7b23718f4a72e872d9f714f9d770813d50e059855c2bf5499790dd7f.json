{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { chordIntervals } from './chordIntervals';\nconst noteMatrix = [[{\n  'number': 10,\n  'char': 'C\\uED64'\n}, {\n  'number': 11,\n  'char': 'C\\uED60'\n}, {\n  'number': 0,\n  'char': 'C'\n}, {\n  'number': 1,\n  'char': 'C\\uED62'\n}, {\n  'number': 2,\n  'char': 'C\\uED63'\n}], [{\n  'number': 0,\n  'char': 'D\\uED64'\n}, {\n  'number': 1,\n  'char': 'D\\uED60'\n}, {\n  'number': 2,\n  'char': 'D'\n}, {\n  'number': 3,\n  'char': 'D\\uED62'\n}, {\n  'number': 4,\n  'char': 'D\\uED63'\n}], [{\n  'number': 2,\n  'char': 'E\\uED64'\n}, {\n  'number': 3,\n  'char': 'E\\uED60'\n}, {\n  'number': 4,\n  'char': 'E'\n}, {\n  'number': 5,\n  'char': 'E\\uED62'\n}, {\n  'number': 6,\n  'char': 'E\\uED63'\n}], [{\n  'number': 3,\n  'char': 'F\\uED64'\n}, {\n  'number': 4,\n  'char': 'F\\uED60'\n}, {\n  'number': 5,\n  'char': 'F'\n}, {\n  'number': 6,\n  'char': 'F\\uED62'\n}, {\n  'number': 7,\n  'char': 'F\\uED63'\n}], [{\n  'number': 5,\n  'char': 'G\\uED64'\n}, {\n  'number': 6,\n  'char': 'G\\uED60'\n}, {\n  'number': 7,\n  'char': 'G'\n}, {\n  'number': 8,\n  'char': 'G\\uED62'\n}, {\n  'number': 9,\n  'char': 'G\\uED63'\n}], [{\n  'number': 7,\n  'char': 'A\\uED64'\n}, {\n  'number': 8,\n  'char': 'A\\uED60'\n}, {\n  'number': 9,\n  'char': 'A'\n}, {\n  'number': 10,\n  'char': 'A\\uED62'\n}, {\n  'number': 11,\n  'char': 'A\\uED63'\n}], [{\n  'number': 9,\n  'char': 'B\\uED64'\n}, {\n  'number': 10,\n  'char': 'B\\uED60'\n}, {\n  'number': 11,\n  'char': 'B'\n}, {\n  'number': 0,\n  'char': 'B\\uED62'\n}, {\n  'number': 1,\n  'char': 'B\\uED63'\n}]];\nconst positions = [[[0, 2], [6, 3], [1, 0]], [[1, 1], [0, 3], [6, 4]], [[1, 2], [2, 0], [0, 4]], [[2, 1], [1, 3], [3, 0]], [[2, 2], [3, 1], [1, 4]], [[3, 2], [2, 3], [4, 0]], [[4, 1], [3, 3], [2, 4]], [[4, 2], [5, 0], [3, 4]], [[5, 1], [4, 3]], [[5, 2], [6, 0], [4, 4]], [[6, 1], [5, 3], [0, 0]], [[6, 2], [0, 1], [5, 4]]];\n\n// Function transforms y-index in matrix to degree of accidental. e.g. [0,1,2,3,4] -> [2,1,0,1,2]\nconst accTransform = a => Math.abs(a - 2);\nconst getChordType = (arr, i) => {\n  const negativeFix = n => Math.sign(n) === -1 ? n += 12 : n;\n  const interval1 = negativeFix(arr[(i + 2) % arr.length] - arr[i]);\n  const interval2 = negativeFix(arr[(i + 4) % arr.length] - arr[(i + 2) % arr.length]);\n  const interval3 = negativeFix(arr[(i + 6) % arr.length] - arr[(i + 4) % arr.length]);\n  const intHash = Number(\"\" + interval1 + interval2 + interval3);\n\n  // const interval1 = negativeFix(arr[(i+2) % arr.length] - arr[i]);\n  // const interval2 = negativeFix(arr[(i+4) % arr.length] - arr[(i+2) % arr.length]);\n  // const intHash = Number(\"\" + interval1 + interval2);\n  // console.log(chordIntervals[intHash]);\n\n  return chordIntervals[intHash];\n};\nconst getNumeral = (type, i) => {\n  if (!type) return \"\";\n  const numeral = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"];\n  if (type === \"dim\") return numeral[i] + \"o\";\n  if (type === \"dim7\") return numeral[i] + \"o\";\n  if (type === \"hdim7\") return numeral[i] + \"o\";\n  if (type === \"min\") return numeral[i];\n  if (type === \"min7\") return numeral[i];\n  if (type === \"minmaj7\") return numeral[i];\n  if (type === \"maj\") return numeral[i].toUpperCase();\n  if (type === \"maj7\") return numeral[i].toUpperCase();\n  if (type === \"dom7\") return numeral[i].toUpperCase();\n  if (type === \"aug\") return numeral[i].toUpperCase() + \"+\";\n  if (type === \"aug7\") return numeral[i].toUpperCase() + \"+\";\n  if (type === \"augmaj7\") return numeral[i].toUpperCase() + \"+\";\n};\nexport const pitchSpeller = (scales, transpose) => {\n  /*\r\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\r\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\r\n  */\n\n  const outputArray = {};\n  Object.keys(scales).forEach(scaleName => {\n    const startPositions = positions[(scales[scaleName][0] + Number(transpose)) % 12];\n    const scaleLength = scales[scaleName].length;\n    var lowestCount = 999;\n    var winner = undefined;\n    for (let i = 0; i < startPositions.length; i++) {\n      const [sx, sy] = startPositions[i];\n\n      // Starting scale with a double accidental would be very unusual.\n      // Skipping third starting coord may safe a small bit of time.\n      // if (i > 1) break  \n\n      const chordTypes = [];\n      for (let j = 0; j < scaleLength; j++) {\n        const chordType = getChordType(scales[scaleName], j);\n        chordTypes.push({\n          type: chordType,\n          num: getNumeral(chordType.short, j)\n        });\n      }\n      const resultArray = [];\n      var accidentalCount = 0;\n      for (let j = 0; j < scaleLength; j++) {\n        if (!j) {\n          resultArray.push({\n            \"id\": uuidv4(),\n            \"char\": noteMatrix[sx][sy]['char'],\n            \"type\": chordTypes[j].type,\n            \"num\": chordTypes[j].num\n          });\n          accidentalCount += accTransform(sy);\n          continue;\n        }\n        const x = (j + sx) % scaleLength;\n        const matrixY = noteMatrix[x].map(obj => obj.number);\n        const transposedNote = (scales[scaleName][j] + Number(transpose)) % 12;\n        const indexY = matrixY.indexOf(transposedNote);\n        console.log(accTransform(indexY), noteMatrix[x][indexY].char);\n        if (indexY === -1) {\n          accidentalCount = 999;\n          break;\n        }\n        resultArray.push({\n          \"id\": uuidv4(),\n          \"char\": noteMatrix[x][indexY].char,\n          \"type\": chordTypes[j].type,\n          \"num\": chordTypes[j].num\n        });\n        accidentalCount += accTransform(indexY);\n      }\n      if (accidentalCount < lowestCount) {\n        lowestCount = accidentalCount;\n        winner = resultArray;\n      }\n    }\n    outputArray[scaleName] = winner;\n  });\n  return outputArray;\n};","map":{"version":3,"names":["v4","uuidv4","chordIntervals","noteMatrix","positions","accTransform","a","Math","abs","getChordType","arr","i","negativeFix","n","sign","interval1","length","interval2","interval3","intHash","Number","getNumeral","type","numeral","toUpperCase","pitchSpeller","scales","transpose","outputArray","Object","keys","forEach","scaleName","startPositions","scaleLength","lowestCount","winner","undefined","sx","sy","chordTypes","j","chordType","push","num","short","resultArray","accidentalCount","x","matrixY","map","obj","number","transposedNote","indexY","indexOf","console","log","char"],"sources":["C:/Users/Levi/Desktop/portfolio/src/Chart/pitchSpeller.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { chordIntervals } from './chordIntervals';\r\n\r\nconst noteMatrix: Array<Array<{'number': number, 'char': string}>> = [\r\n  [{'number': 10,'char': 'C\\uED64'}, {'number': 11,'char': 'C\\uED60'}, {'number': 0, 'char': 'C'}, {'number': 1, 'char': 'C\\uED62'}, {'number': 2, 'char': 'C\\uED63'}],\r\n  [{'number': 0, 'char': 'D\\uED64'}, {'number': 1, 'char': 'D\\uED60'}, {'number': 2, 'char': 'D'}, {'number': 3, 'char': 'D\\uED62'}, {'number': 4, 'char': 'D\\uED63'}],\r\n  [{'number': 2, 'char': 'E\\uED64'}, {'number': 3, 'char': 'E\\uED60'}, {'number': 4, 'char': 'E'}, {'number': 5, 'char': 'E\\uED62'}, {'number': 6, 'char': 'E\\uED63'}],\r\n  [{'number': 3, 'char': 'F\\uED64'}, {'number': 4, 'char': 'F\\uED60'}, {'number': 5, 'char': 'F'}, {'number': 6, 'char': 'F\\uED62'}, {'number': 7, 'char': 'F\\uED63'}],\r\n  [{'number': 5, 'char': 'G\\uED64'}, {'number': 6, 'char': 'G\\uED60'}, {'number': 7, 'char': 'G'}, {'number': 8, 'char': 'G\\uED62'}, {'number': 9, 'char': 'G\\uED63'}],\r\n  [{'number': 7, 'char': 'A\\uED64'}, {'number': 8, 'char': 'A\\uED60'}, {'number': 9, 'char': 'A'}, {'number': 10,'char': 'A\\uED62'}, {'number': 11,'char': 'A\\uED63'}],\r\n  [{'number': 9, 'char': 'B\\uED64'}, {'number': 10,'char': 'B\\uED60'}, {'number': 11,'char': 'B'}, {'number': 0, 'char': 'B\\uED62'}, {'number': 1, 'char': 'B\\uED63'}],\r\n]\r\n\r\nconst positions: Array<Array<[number, number]>> = [\r\n  [[0,2], [6,3], [1,0]],\r\n  [[1,1], [0,3], [6,4]],\r\n  [[1,2], [2,0], [0,4]],\r\n  [[2,1], [1,3], [3,0]],\r\n  [[2,2], [3,1], [1,4]],\r\n  [[3,2], [2,3], [4,0]],\r\n  [[4,1], [3,3], [2,4]],\r\n  [[4,2], [5,0], [3,4]],\r\n  [[5,1], [4,3]],\r\n  [[5,2], [6,0], [4,4]],\r\n  [[6,1], [5,3], [0,0]],\r\n  [[6,2], [0,1], [5,4]],\r\n]\r\n\r\n// Function transforms y-index in matrix to degree of accidental. e.g. [0,1,2,3,4] -> [2,1,0,1,2]\r\nconst accTransform = (a: number) => Math.abs(a-2);\r\n\r\nconst getChordType = (arr: number[], i: number) => {\r\n  \r\n  const negativeFix = (n: number) => (Math.sign(n) === -1) ? n += 12 : n\r\n\r\n  const interval1 = negativeFix(arr[(i+2) % arr.length] - arr[i]);\r\n  const interval2 = negativeFix(arr[(i+4) % arr.length] - arr[(i+2) % arr.length]);\r\n  const interval3 = negativeFix(arr[(i+6) % arr.length] - arr[(i+4) % arr.length]);\r\n  const intHash = Number(\"\" + interval1 + interval2 + interval3);\r\n\r\n  // const interval1 = negativeFix(arr[(i+2) % arr.length] - arr[i]);\r\n  // const interval2 = negativeFix(arr[(i+4) % arr.length] - arr[(i+2) % arr.length]);\r\n  // const intHash = Number(\"\" + interval1 + interval2);\r\n  // console.log(chordIntervals[intHash]);\r\n\r\n  return chordIntervals[intHash];\r\n}\r\n\r\nconst getNumeral = (type: string | undefined, i: number) => {\r\n  if (!type) return \"\"\r\n\r\n  const numeral = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"];\r\n\r\n  if (type === \"dim\") return numeral[i] + \"o\"\r\n  if (type === \"dim7\") return numeral[i] + \"o\"\r\n  if (type === \"hdim7\") return numeral[i] + \"o\"\r\n  if (type === \"min\") return numeral[i]\r\n  if (type === \"min7\") return numeral[i]\r\n  if (type === \"minmaj7\") return numeral[i]\r\n  if (type === \"maj\") return numeral[i].toUpperCase()\r\n  if (type === \"maj7\") return numeral[i].toUpperCase()\r\n  if (type === \"dom7\") return numeral[i].toUpperCase()\r\n  if (type === \"aug\") return numeral[i].toUpperCase() + \"+\"\r\n  if (type === \"aug7\") return numeral[i].toUpperCase() + \"+\"\r\n  if (type === \"augmaj7\") return numeral[i].toUpperCase() + \"+\"\r\n\r\n}\r\n\r\nexport const pitchSpeller = (scales: {[key: string]: number[]}, transpose: number) => {\r\n  /*\r\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\r\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\r\n  */\r\n\r\n  const outputArray: any = {}\r\n\r\n  Object.keys(scales).forEach(scaleName => {\r\n    const startPositions = positions[(scales[scaleName][0] + Number(transpose)) % 12]\r\n    const scaleLength = scales[scaleName].length\r\n\r\n    var lowestCount = 999\r\n    var winner = undefined\r\n\r\n    for (let i = 0; i < startPositions.length; i++) {\r\n      const [sx, sy] = startPositions[i]\r\n\r\n      // Starting scale with a double accidental would be very unusual.\r\n      // Skipping third starting coord may safe a small bit of time.\r\n      // if (i > 1) break  \r\n\r\n      const chordTypes = []\r\n\r\n      for (let j = 0; j < scaleLength; j++) {\r\n        const chordType = getChordType(scales[scaleName], j)\r\n        chordTypes.push({type: chordType, num: getNumeral(chordType.short, j)})\r\n      }\r\n\r\n      const resultArray = []\r\n      var accidentalCount = 0\r\n\r\n      for (let j = 0; j < scaleLength; j++) {\r\n\r\n        if (!j) {\r\n          resultArray.push({\"id\": uuidv4(), \"char\": noteMatrix[sx][sy]['char'], \"type\": chordTypes[j].type, \"num\": chordTypes[j].num})\r\n          accidentalCount += accTransform(sy)\r\n          continue\r\n        }\r\n        \r\n        const x = (j+sx)%scaleLength\r\n        const matrixY = noteMatrix[x].map(obj => obj.number)\r\n        const transposedNote = (scales[scaleName][j] + Number(transpose)) % 12\r\n        const indexY = matrixY.indexOf(transposedNote)\r\n        console.log(accTransform(indexY), noteMatrix[x][indexY].char);\r\n\r\n        if (indexY === -1) {\r\n          accidentalCount = 999\r\n          break\r\n        } \r\n        resultArray.push({\"id\": uuidv4(), \"char\": noteMatrix[x][indexY].char, \"type\": chordTypes[j].type, \"num\": chordTypes[j].num})\r\n        accidentalCount += accTransform(indexY)\r\n      }\r\n\r\n      if (accidentalCount < lowestCount) {\r\n        lowestCount = accidentalCount\r\n        winner = resultArray\r\n      }\r\n    }\r\n    outputArray[scaleName] = winner\r\n  })\r\n\r\n  return outputArray\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}