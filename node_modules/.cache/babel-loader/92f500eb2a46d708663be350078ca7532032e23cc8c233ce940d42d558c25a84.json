{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { DndContext, DragOverlay, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [dragId, setDragId] = useState(undefined);\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return;\n    }\n    ;\n    console.log({\n      active: active\n    }, {\n      over: over\n    });\n    if (active.data.current.chord) {\n      // if draggable is from table, NOT from sortable\n\n      const chord = active.data.current.chord;\n      const chordCoords = active.data.current.chordCoords;\n      const {\n        containerId: newContainerId,\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      const setScalesFunc = active.data.current.setFunc;\n      const setItemsFunc = over.data.current.setFunc;\n      const duplicateIndex = items.findIndex(i => i.id === dragId);\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        setItemsFunc(items => [...items, {\n          ...chord,\n          id: dragId\n        }]);\n        setScalesFunc(scales => console.log({\n          ...scales,\n          [chordCoords.scale]: {\n            ...scales[chordCoords.scale]\n          }\n        }));\n        // setScalesFunc((scales: any) => ({...scales, [chord.scale]: scales[chord.scale]}));\n        // setScalesFunc((scales: any) => scales.map((item: any) => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n      } else {\n        setItemsFunc(items => arrayMove(items, duplicateIndex, newIndex));\n      }\n      ;\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n        const oldIndex = active.data.current.sortable.index;\n        over.data.current.setFunc(items => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n        return;\n      }\n      ;\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return;\n    }\n    ;\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n      over.data.current.setFunc(items => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: ({\n      active\n    }) => {\n      setDragId(active.id);\n    },\n    onDragCancel: () => {\n      setDragId(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    collisionDetection: rectIntersection,\n    children: [children, /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardContent maj\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cardNumber\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cardText\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"VklefMBRAMgoIxvdBTZLS8MTzrg=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","DndContext","DragOverlay","rectIntersection","arrayMove","jsxDEV","_jsxDEV","ProgContext","undefined","ModeContext","children","_s","dragId","setDragId","handleDragOver","active","over","data","current","console","log","chord","chordCoords","containerId","newContainerId","index","newIndex","items","sortable","setScalesFunc","setFunc","setItemsFunc","duplicateIndex","findIndex","i","id","scales","scale","handleDragEnd","oldIndex","slice","concat","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\n\n\nexport const ProgContext = createContext<any>(undefined);\n\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\n\n\n  const handleDragOver = ({active, over}: any) => {\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return\n    };\n\n    console.log({active: active}, {over: over});\n\n    if (active.data.current.chord) {\n      // if draggable is from table, NOT from sortable\n\n      const chord = active.data.current.chord;\n      const chordCoords = active.data.current.chordCoords;\n      const {containerId: newContainerId, index: newIndex, items } = over.data.current.sortable;\n\n      const setScalesFunc = active.data.current.setFunc;\n      const setItemsFunc = over.data.current.setFunc;\n\n      const duplicateIndex = items.findIndex((i: any) => i.id === dragId);\n      \n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        setItemsFunc((items: any) => [...items, {...chord, id: dragId}]);\n        setScalesFunc((scales: any) => console.log({...scales, [chordCoords.scale]: {...scales[chordCoords.scale]}}));\n        // setScalesFunc((scales: any) => ({...scales, [chord.scale]: scales[chord.scale]}));\n        // setScalesFunc((scales: any) => scales.map((item: any) => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      } else {\n        setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n      };\n      \n      return\n    };\n  }\n\n\n  const handleDragEnd = ({active, over}: any) => {\n\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n\n        const oldIndex = active.data.current.sortable.index;\n        over.data.current.setFunc((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        return\n      };\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return\n    };\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      over.data.current.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n\n  return (\n    <DndContext\n      onDragStart={({active}: any) => {setDragId(active.id)}}\n      onDragCancel={() => {setDragId(undefined)}}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n      collisionDetection={rectIntersection}\n    >\n      {children}\n      <DragOverlay>\n        <div className='cardContent maj'>\n          <div className='cardNumber'></div>\n          <div className='cardText'></div>\n        </div>\n      </DragOverlay>\n    </DndContext>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}