{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { DndContext, DragOverlay, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const ProgContext = /*#__PURE__*/createContext('');\n  const [items, setItems] = useState([{\n    id: 'temp0',\n    note: '1'\n  }, {\n    id: 'temp1',\n    note: '2'\n  }, {\n    id: 'temp2',\n    note: '3'\n  }]);\n  const [dragId, setDragId] = useState(undefined);\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return;\n    }\n    ;\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n      const {\n        index: newIndex,\n        containerId: newContainerId\n      } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n\n      const duplicateIndex = items.findIndex(i => i.id === dragId);\n\n      // console.log(matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      // if (!items.some(i => i.id === dragId)) {\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        // setItems((items) => items.slice(0, newIndex).concat({...payload, id: dragId}, items.slice(newIndex)));\n        setItems(items => [...items, {\n          ...payload,\n          id: dragId\n        }]);\n\n        // console.log({newItem: {...payload, id: uuidv4()}});\n\n        // setMatrix((matrix) => matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n      } else {\n        setItems(items => arrayMove(items, duplicateIndex, newIndex));\n      }\n      ;\n      // }\n\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n        const oldIndex = active.data.current.sortable.index;\n        setItems(items => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n        return;\n      }\n      ;\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return;\n    }\n    ;\n\n    // if (active.data.current.payload) {\n    // console.log('table -> sortable')\n\n    // const payload = active.data.current.payload;\n    // const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n    // if (newContainerId === 'chordSortable') {\n    //   // setItems((items) => items.slice(0, newIndex + 1).concat(payload, items.slice(newIndex + 1)));\n    //   setItems((items) => [...items, {...payload, id: dragId}]);\n    // }\n\n    // return\n    // }\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n      setItems(items => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ProgContext.Provider, {\n    value: '...',\n    children: /*#__PURE__*/_jsxDEV(DndContext, {\n      onDragStart: ({\n        active\n      }) => {\n        setDragId(active.id);\n      },\n      onDragCancel: () => {\n        setDragId(undefined);\n      },\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      collisionDetection: rectIntersection,\n      children: [children, /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cardContent maj\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cardNumber\",\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cardText\",\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"KP49dLI4fhy4XMlkxdLOEX8djns=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","DndContext","DragOverlay","rectIntersection","arrayMove","jsxDEV","_jsxDEV","ModeContext","children","_s","ProgContext","items","setItems","id","note","dragId","setDragId","undefined","handleDragOver","active","over","data","current","payload","index","newIndex","containerId","newContainerId","sortable","duplicateIndex","findIndex","i","handleDragEnd","console","log","oldIndex","slice","concat","Provider","value","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  const ProgContext = createContext('');\n\n  const [items, setItems] = useState<Array<{id: string; note: string}>>([\n    {id: 'temp0', note: '1'}, \n    {id: 'temp1', note: '2'}, \n    {id: 'temp2', note: '3'}, \n  ]);\n\n  const [dragId, setDragId] = useState<string | undefined>(undefined);\n\n  const handleDragOver = ({active, over}: any) => {\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return\n    };\n\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n      const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n\n      const duplicateIndex = items.findIndex(i => i.id === dragId);\n      \n      // console.log(matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      // if (!items.some(i => i.id === dragId)) {\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        // setItems((items) => items.slice(0, newIndex).concat({...payload, id: dragId}, items.slice(newIndex)));\n        setItems(items => [...items, {...payload, id: dragId}]);\n\n        // console.log({newItem: {...payload, id: uuidv4()}});\n\n        // setMatrix((matrix) => matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      } else {\n        setItems(items => arrayMove(items, duplicateIndex, newIndex));\n      };\n      // }\n      \n      return\n    };\n  }\n\n  const handleDragEnd = ({active, over}: any) => {\n\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n\n        const oldIndex = active.data.current.sortable.index;\n        setItems((items) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        return\n      };\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return\n    };\n    \n    // if (active.data.current.payload) {\n      // console.log('table -> sortable')\n\n      // const payload = active.data.current.payload;\n      // const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n      //   // setItems((items) => items.slice(0, newIndex + 1).concat(payload, items.slice(newIndex + 1)));\n      //   setItems((items) => [...items, {...payload, id: dragId}]);\n      // }\n      \n      // return\n    // }\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      setItems((items) => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n  return (\n    <ProgContext.Provider value={'...'}>\n      <DndContext\n        onDragStart={({active}: any) => {setDragId(active.id)}}\n        onDragCancel={() => {setDragId(undefined)}}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n        collisionDetection={rectIntersection}\n      >\n        {children}\n        <DragOverlay>\n          <div className='cardContent maj'>\n            <div className='cardNumber'>x</div>\n            <div className='cardText'>X</div>\n          </div>\n        </DragOverlay>\n      </DndContext>\n    </ProgContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}