{"ast":null,"code":"export const pitchSpeller = (scales, transpose) => {\n  /*\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\n  */\n\n  console.log(scales, transpose);\n\n  // for scaleName in scales:\n\n  //   if len(scales[scaleName]) != 7:\n  //     print(f\"{scaleName:<18}ERROR: Scale not heptatonic.\", end=\"\")\n  //     continue\n\n  //   # iter scale degree arrays\n  //   # print(f\"{scaleName}:\")\n  //   startCoords = noteCoords[(scales[scaleName][0]+ int(transpose)) % 12]\n  //   scaleLength = len(scales[scaleName])\n\n  //   lowestCount = 999\n  //   winner = None\n\n  //   for i, (sx, sy) in enumerate(startCoords):\n  //     # iter possible starting coordinates\n\n  //     # third coordinate is generally not needed\n  //     # few scales start with a double accidental\n  //     if i > 1:\n  //       break\n\n  //     # noteRange = [(sx+1 + i) % 7 for i in range(6)]\n  //     noteRange = [(sx+1 + i) % scaleLength for i in range(scaleLength-1)]\n\n  //     resultArray = [noteMatrix[sx,sy]['char']]\n  //     accidentalCount = accTransform(sy)\n\n  //     for j, x in enumerate(noteRange):\n  //     # iter notes in scale (first skipped)\n  //       matrixY = [noteMatrix[x,k]['#'] for k in range(5)] \n  //       try:\n  //         indexY = matrixY.index((scales[scaleName][j+1] + int(transpose)) % 12)\n  //         resultArray.append(noteMatrix[x, indexY]['char'])\n  //         accidentalCount += accTransform(indexY)\n  //       except:\n  //         accidentalCount = 999\n  //         break\n\n  //     # if len(resultArray) >= len(scales[scaleName]):\n  //     #   print(f\"• {accidentalCount:<3}{resultArray}\")\n\n  //     if accidentalCount < lowestCount:\n  //       lowestCount = accidentalCount\n  //       winner = resultArray\n\n  //   print(f\"{scaleName:<18}\", end=\"\"), print(*winner, sep=\", \")\n};","map":{"version":3,"names":["pitchSpeller","scales","transpose","console","log"],"sources":["C:/Users/Levi/Desktop/portfolio/src/Chart/pitchSpeller.ts"],"sourcesContent":["export const pitchSpeller = (scales: {[key: string]: number[]}, transpose: number) => {\n  /*\n  Function returns correct character set for scale degree array. Only accepts heptatonic scales.\n  in: {'scaleName': [0,2,4,5,7,9,11]} -> out: {'scaleName': [{char: 'C', type: 'maj', num: 'I'}, {char: 'D', type: 'maj', num: 'II'}, ...]}\n  */\n\n  console.log(scales, transpose)\n\n  // for scaleName in scales:\n\n  //   if len(scales[scaleName]) != 7:\n  //     print(f\"{scaleName:<18}ERROR: Scale not heptatonic.\", end=\"\")\n  //     continue\n\n  //   # iter scale degree arrays\n  //   # print(f\"{scaleName}:\")\n  //   startCoords = noteCoords[(scales[scaleName][0]+ int(transpose)) % 12]\n  //   scaleLength = len(scales[scaleName])\n\n  //   lowestCount = 999\n  //   winner = None\n    \n  //   for i, (sx, sy) in enumerate(startCoords):\n  //     # iter possible starting coordinates\n\n  //     # third coordinate is generally not needed\n  //     # few scales start with a double accidental\n  //     if i > 1:\n  //       break\n\n  //     # noteRange = [(sx+1 + i) % 7 for i in range(6)]\n  //     noteRange = [(sx+1 + i) % scaleLength for i in range(scaleLength-1)]\n\n  //     resultArray = [noteMatrix[sx,sy]['char']]\n  //     accidentalCount = accTransform(sy)\n\n  //     for j, x in enumerate(noteRange):\n  //     # iter notes in scale (first skipped)\n  //       matrixY = [noteMatrix[x,k]['#'] for k in range(5)] \n  //       try:\n  //         indexY = matrixY.index((scales[scaleName][j+1] + int(transpose)) % 12)\n  //         resultArray.append(noteMatrix[x, indexY]['char'])\n  //         accidentalCount += accTransform(indexY)\n  //       except:\n  //         accidentalCount = 999\n  //         break\n\n  //     # if len(resultArray) >= len(scales[scaleName]):\n  //     #   print(f\"• {accidentalCount:<3}{resultArray}\")\n    \n  //     if accidentalCount < lowestCount:\n  //       lowestCount = accidentalCount\n  //       winner = resultArray\n\n  //   print(f\"{scaleName:<18}\", end=\"\"), print(*winner, sep=\", \")\n}"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGA,CAACC,MAAiC,EAAEC,SAAiB,KAAK;EACpF;AACF;AACA;AACA;;EAEEC,OAAO,CAACC,GAAG,CAACH,MAAM,EAAEC,SAAS,CAAC;;EAE9B;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}