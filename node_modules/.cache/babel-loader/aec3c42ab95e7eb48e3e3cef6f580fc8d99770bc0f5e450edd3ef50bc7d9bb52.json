{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, createContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DndContext, DragOverlay, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgContext = /*#__PURE__*/createContext(undefined);\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  // const [dragId, setDragId] = useState<string | undefined>(undefined);\n  const [payloadStorage, setPayloadStorage] = useState(undefined);\n  const [throttle, setThrottle] = useState(false);\n  const handleDragStart = ({\n    active\n  }) => {\n    // console.log({activeStart: active});\n\n    // setDragId(active.id); \n    if (active.data.current.payload) {\n      setPayloadStorage(active.data.current.payload);\n    }\n    ;\n  };\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!payloadStorage) return;\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      // console.log({activeDO: active})\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        console.log('remove from sortable');\n\n        // remove based on index, could remove wrong card.\n\n        // const oldIndex = active.data.current.payload.index;\n        // active.data.current.payload.setFunc((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        // remove based on ID, cannot remove wrong card.\n\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n        active.data.current.payload.setFunc(items => new Set([...items].filter(chord => chord.id !== active.data.current.payload.chord.id)));\n        setThrottle(true);\n        setTimeout(() => {\n          setThrottle(false);\n        }, 100);\n        return;\n      }\n      ;\n      return;\n    }\n    ;\n    if (payloadStorage.chord) {\n      console.log('add to sortable / swap');\n      if (throttle) return;\n\n      // const chord = active.data.current.payload.chord;\n      const chord = payloadStorage.chord;\n      const {\n        index: newIndex,\n        items\n      } = over.data.current.sortable;\n      const setItemsFunc = over.data.current.payload.setFunc;\n\n      // console.log(dragId, payloadStorage);\n\n      // const duplicateIndex = items.findIndex((i: any) => i.id === dragId);\n      // const duplicateIndex = items.findIndex((id: any) => id === dragId);\n      const duplicateIndex = items.findIndex(id => id === payloadStorage.id);\n      console.log(duplicateIndex);\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable        \n        // setItemsFunc((items: any) => items.toSpliced(newIndex, 0, {...chord, id: dragId}));\n\n        // @ts-ignore\n        // setItemsFunc((items: any) => new Set([...items].toSpliced(newIndex, 0, {...chord, id: dragId})));\n        setItemsFunc(items => new Set([...items].toSpliced(newIndex, 0, {\n          ...chord,\n          id: payloadStorage.id\n        })));\n      } else {\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n        setItemsFunc(items => new Set(arrayMove([...items], duplicateIndex, newIndex)));\n      }\n      ;\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on in any case\n      payloadStorage.setFunc(prevScales => {\n        const newScales = {\n          ...prevScales\n        };\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n        return newScales;\n      });\n    }\n    if (!over) return;\n    console.log(payloadStorage, active, over);\n\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index; // !\n      const newIndex = over.data.current.sortable.index;\n\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n      over.data.current.payload.setFunc(items => new Set(arrayMove([...items], oldIndex, newIndex)));\n      return;\n    }\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      console.log('chart -> sortable');\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: handleDragStart,\n    onDragCancel: () => {\n      // setDragId(undefined); \n      setPayloadStorage(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    collisionDetection: rectIntersection,\n    children: [children, payloadStorage ? /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: /*#__PURE__*/_jsxDEV(NoteCard, {\n        chord: payloadStorage.chord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"Up9MNeJN8MQ3DPhWmxaP8CeveB8=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","createContext","v4","uuidv4","DndContext","DragOverlay","rectIntersection","arrayMove","NoteCard","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgContext","undefined","ModeContext","children","_s","payloadStorage","setPayloadStorage","throttle","setThrottle","handleDragStart","active","data","current","payload","handleDragOver","over","sortable","console","log","setFunc","items","Set","filter","chord","id","setTimeout","index","newIndex","setItemsFunc","duplicateIndex","findIndex","toSpliced","handleDragEnd","origin","prevScales","newScales","chordDir","scale","oldIndex","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { NoteCard } from '../NoteCard';\n\nexport const ProgContext = createContext<any>(undefined);\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  // const [dragId, setDragId] = useState<string | undefined>(undefined);\n  const [payloadStorage, setPayloadStorage] = useState<any | undefined>(undefined);\n  const [throttle, setThrottle] = useState<boolean>(false);\n\n  const handleDragStart = ({active}: any) => {\n\n    // console.log({activeStart: active});\n\n    // setDragId(active.id); \n    if (active.data.current.payload) { setPayloadStorage(active.data.current.payload) };\n  }\n\n  const handleDragOver = ({active, over}: any) => {\n\n    if (!payloadStorage) return;\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not drop zone\n\n      // console.log({activeDO: active})\n\n      if (active.data.current.sortable) {\n        // if from sortable, remove card at index from sortable\n        console.log('remove from sortable');\n\n        // remove based on index, could remove wrong card.\n\n        // const oldIndex = active.data.current.payload.index;\n        // active.data.current.payload.setFunc((items: any) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        // remove based on ID, cannot remove wrong card.\n\n        // active.data.current.payload.setFunc((items: any) => items.filter((chord: any) => chord.id !== active.data.current.payload.chord.id));\n        active.data.current.payload.setFunc((items: any) => new Set([...items].filter((chord: any) => chord.id !== active.data.current.payload.chord.id)));\n\n        setThrottle(true);\n        setTimeout(() => {\n          setThrottle(false);\n        }, 100);\n\n        return\n      };\n\n      return\n    };\n\n    if (payloadStorage.chord) {\n      console.log('add to sortable / swap');\n\n      if (throttle) return\n\n      // const chord = active.data.current.payload.chord;\n      const chord = payloadStorage.chord;\n      const {index: newIndex, items } = over.data.current.sortable;\n      const setItemsFunc = over.data.current.payload.setFunc;\n\n      // console.log(dragId, payloadStorage);\n\n      // const duplicateIndex = items.findIndex((i: any) => i.id === dragId);\n      // const duplicateIndex = items.findIndex((id: any) => id === dragId);\n      const duplicateIndex = items.findIndex((id: any) => id === payloadStorage.id);\n      console.log(duplicateIndex);\n      \n      if (duplicateIndex === -1) {\n        // dragId not already in sortable        \n        // setItemsFunc((items: any) => items.toSpliced(newIndex, 0, {...chord, id: dragId}));\n\n        // @ts-ignore\n        // setItemsFunc((items: any) => new Set([...items].toSpliced(newIndex, 0, {...chord, id: dragId})));\n        setItemsFunc((items: any) => new Set([...items].toSpliced(newIndex, 0, {...chord, id: payloadStorage.id})));\n\n      } else {\n        // setItemsFunc((items: any) => arrayMove(items, duplicateIndex, newIndex));\n        setItemsFunc((items: any) => new Set(arrayMove([...items], duplicateIndex, newIndex)));\n      };\n\n      return\n    };\n  }\n\n  const handleDragEnd = ({active, over}: any) => {\n    \n    if (payloadStorage.origin === 'chart') {\n      // reset id of dragged chart item on in any case\n      payloadStorage.setFunc((prevScales: any) => {\n        const newScales = {...prevScales};\n        newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n        return newScales;\n      });\n    }\n\n    if (!over) return;\n\n    console.log(payloadStorage, active, over);\n\n    // if (payloadStorage.origin === 'progBar' && over.data.current.sortable) {\n    if (payloadStorage.origin === 'progBar' && active.data.current.sortable && over.data.current.sortable) {\n\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;  // !\n      const newIndex = over.data.current.sortable.index;\n\n      // over.data.current.payload.setFunc((items: any) => arrayMove(items, oldIndex, newIndex));\n      over.data.current.payload.setFunc((items: any) => new Set(arrayMove([...items], oldIndex, newIndex)));\n      return\n    }\n\n    if (payloadStorage.origin === 'chart' && over.data.current.sortable) {\n      console.log('chart -> sortable')\n\n      // payloadStorage.setFunc((prevScales: any) => {\n      //   const newScales = {...prevScales};\n      //   newScales[payloadStorage.chordDir.scale][payloadStorage.chordDir.index].id = uuidv4();\n      //   return newScales;\n      // });\n\n      return\n    }\n  };\n\n\n  return (\n    <DndContext\n      onDragStart={handleDragStart}\n      onDragCancel={() => {\n        // setDragId(undefined); \n        setPayloadStorage(undefined);\n      }}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n      collisionDetection={rectIntersection}\n    >\n      {children}\n      {payloadStorage ? <DragOverlay><NoteCard chord={payloadStorage.chord}/></DragOverlay> : <></>}\n    </DndContext>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}