{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levi\\\\Desktop\\\\portfolio\\\\src\\\\ModeContext\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModeContext = ({\n  children\n}) => {\n  _s();\n  const [items, setItems] = useState([{\n    id: 'temp0',\n    note: '1'\n  }, {\n    id: 'temp1',\n    note: '2'\n  }, {\n    id: 'temp2',\n    note: '3'\n  }]);\n  const [dragId, setDragId] = useState(undefined);\n  const handleDragOver = ({\n    active,\n    over\n  }) => {\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return;\n    }\n    ;\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n      const {\n        index: newIndex,\n        containerId: newContainerId\n      } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n\n      const duplicateIndex = items.findIndex(i => i.id === dragId);\n\n      // console.log(matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      // if (!items.some(i => i.id === dragId)) {\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        // setItems((items) => items.slice(0, newIndex).concat({...payload, id: dragId}, items.slice(newIndex)));\n        setItems(items => [...items, {\n          ...payload,\n          id: dragId\n        }]);\n\n        // console.log({newItem: {...payload, id: uuidv4()}});\n\n        setMatrix(matrix => matrix.map(item => {\n          return item.id === dragId ? {\n            ...item,\n            id: uuidv4()\n          } : item;\n        }));\n      } else {\n        setItems(items => arrayMove(items, duplicateIndex, newIndex));\n      }\n      ;\n      // }\n\n      return;\n    }\n    ;\n  };\n  const handleDragEnd = ({\n    active,\n    over\n  }) => {\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n        const oldIndex = active.data.current.sortable.index;\n        setItems(items => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n        return;\n      }\n      ;\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return;\n    }\n    ;\n\n    // if (active.data.current.payload) {\n    // console.log('table -> sortable')\n\n    // const payload = active.data.current.payload;\n    // const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n    // if (newContainerId === 'chordSortable') {\n    //   // setItems((items) => items.slice(0, newIndex + 1).concat(payload, items.slice(newIndex + 1)));\n    //   setItems((items) => [...items, {...payload, id: dragId}]);\n    // }\n\n    // return\n    // }\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n      console.log('sortable -> sortable');\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n      setItems(items => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: ({\n      active\n    }) => {\n      setDragId(active.id);\n    },\n    onDragCancel: () => {\n      setDragId(undefined);\n    },\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    collisionDetection: rectIntersection,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeContext, \"KP49dLI4fhy4XMlkxdLOEX8djns=\");\n_c = ModeContext;\nvar _c;\n$RefreshReg$(_c, \"ModeContext\");","map":{"version":3,"names":["useState","DndContext","rectIntersection","arrayMove","jsxDEV","_jsxDEV","ModeContext","children","_s","items","setItems","id","note","dragId","setDragId","undefined","handleDragOver","active","over","data","current","payload","index","newIndex","containerId","newContainerId","sortable","duplicateIndex","findIndex","i","setMatrix","matrix","map","item","uuidv4","handleDragEnd","console","log","oldIndex","slice","concat","onDragStart","onDragCancel","onDragOver","onDragEnd","collisionDetection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Levi/Desktop/portfolio/src/ModeContext/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { DndContext, DragOverlay, rectIntersection, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { arrayMove, SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\n\nexport const ModeContext = ({children}: {children: any}) => {\n\n  const [items, setItems] = useState<Array<{id: string; note: string}>>([\n    {id: 'temp0', note: '1'}, \n    {id: 'temp1', note: '2'}, \n    {id: 'temp2', note: '3'}, \n  ]);\n  \n  const [dragId, setDragId] = useState<string | undefined>(undefined);\n\n  const handleDragOver = ({active, over}: any) => {\n\n    if (!over || !over.data.current) {\n      // if object hovered over is not sortable\n      return\n    };\n\n    if (active.data.current.payload) {\n      // if draggable is from table, NOT from sortable\n\n      const payload = active.data.current.payload;\n      const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n\n      const duplicateIndex = items.findIndex(i => i.id === dragId);\n      \n      // console.log(matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      // if (!items.some(i => i.id === dragId)) {\n      if (duplicateIndex === -1) {\n        // dragId not already in sortable\n\n        // setItems((items) => items.slice(0, newIndex).concat({...payload, id: dragId}, items.slice(newIndex)));\n        setItems(items => [...items, {...payload, id: dragId}]);\n\n        // console.log({newItem: {...payload, id: uuidv4()}});\n\n        setMatrix((matrix) => matrix.map(item => { return (item.id === dragId) ? {...item, id: uuidv4()} : item }));\n\n      } else {\n        setItems(items => arrayMove(items, duplicateIndex, newIndex));\n      };\n      // }\n      \n      return\n    };\n  }\n\n  const handleDragEnd = ({active, over}: any) => {\n\n    if (!over) {\n      if (active.data.current.sortable) {\n        // remove from sortable\n        console.log('remove from sortable');\n\n        const oldIndex = active.data.current.sortable.index;\n        setItems((items) => items.slice(0, oldIndex).concat(items.slice(oldIndex + 1)));\n\n        return\n      };\n\n      // cancel if drop invalid\n      console.log('drop location invalid');\n      return\n    };\n    \n    // if (active.data.current.payload) {\n      // console.log('table -> sortable')\n\n      // const payload = active.data.current.payload;\n      // const {index: newIndex, containerId: newContainerId } = over.data.current.sortable;\n\n      // if (newContainerId === 'chordSortable') {\n      //   // setItems((items) => items.slice(0, newIndex + 1).concat(payload, items.slice(newIndex + 1)));\n      //   setItems((items) => [...items, {...payload, id: dragId}]);\n      // }\n      \n      // return\n    // }\n\n    // if (over.data.current.sortable) {\n    if (active.data.current.sortable && over.data.current.sortable) {\n\n      console.log('sortable -> sortable')\n\n      const oldIndex = active.data.current.sortable.index;\n      const newIndex = over.data.current.sortable.index;\n\n      setItems((items) => arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n  return (\n    <DndContext\n      onDragStart={({active}: any) => {setDragId(active.id)}}\n      onDragCancel={() => {setDragId(undefined)}}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n      collisionDetection={rectIntersection}\n    >\n      {children}\n    </DndContext>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}