{"ast":null,"code":"const numberMatrix = [{\n  [-2]: 10,\n  [-1]: 11,\n  0: 0,\n  1: 1,\n  2: 2\n}, {\n  [-2]: 0,\n  [-1]: 1,\n  0: 2,\n  1: 3,\n  2: 4\n}, {\n  [-2]: 2,\n  [-1]: 3,\n  0: 4,\n  1: 5,\n  2: 6\n}, {\n  [-2]: 3,\n  [-1]: 4,\n  0: 5,\n  1: 6,\n  2: 7\n}, {\n  [-2]: 5,\n  [-1]: 6,\n  0: 7,\n  1: 8,\n  2: 9\n}, {\n  [-2]: 7,\n  [-1]: 8,\n  0: 9,\n  1: 10,\n  2: 11\n}, {\n  [-2]: 9,\n  [-1]: 10,\n  0: 11,\n  1: 0,\n  2: 1\n}];\nconst characterMatrix = [{\n  [-2]: 'C\\uED64',\n  [-1]: 'C\\uED60',\n  0: 'C',\n  1: 'C\\uED62',\n  2: 'C\\uED63'\n}, {\n  [-2]: 'D\\uED64',\n  [-1]: 'D\\uED60',\n  0: 'D',\n  1: 'D\\uED62',\n  2: 'D\\uED63'\n}, {\n  [-2]: 'E\\uED64',\n  [-1]: 'E\\uED60',\n  0: 'E',\n  1: 'E\\uED62',\n  2: 'E\\uED63'\n}, {\n  [-2]: 'F\\uED64',\n  [-1]: 'F\\uED60',\n  0: 'F',\n  1: 'F\\uED62',\n  2: 'F\\uED63'\n}, {\n  [-2]: 'G\\uED64',\n  [-1]: 'G\\uED60',\n  0: 'G',\n  1: 'G\\uED62',\n  2: 'G\\uED63'\n}, {\n  [-2]: 'A\\uED64',\n  [-1]: 'A\\uED60',\n  0: 'A',\n  1: 'A\\uED62',\n  2: 'A\\uED63'\n}, {\n  [-2]: 'B\\uED64',\n  [-1]: 'B\\uED60',\n  0: 'B',\n  1: 'B\\uED62',\n  2: 'B\\uED63'\n}];\nconst positions = [[[0, 0], [6, 1], [1, -2]], [[1, -1], [0, 1], [6, 2]], [[1, 0], [2, -2], [0, 2]], [[2, -1], [1, 1], [3, -2]], [[2, 0], [3, -1], [1, 2]], [[3, 0], [2, 1], [4, -2]], [[4, -1], [3, 1], [2, 2]], [[4, 0], [5, -2], [3, 2]], [[5, -1], [4, 1]], [[5, 0], [6, -2], [4, 2]], [[6, -1], [5, 1], [0, -2]], [[6, 0], [0, -1], [5, 2]]];\nexport const getSpellingPath = recipe => {\n  const startingCoords = positions[recipe[0]];\n  let best = {\n    spellingPath: [],\n    accidentalCount: Infinity\n  };\n  startingCoords.forEach(([startX, _], i) => {\n    const xArray = Array.from({\n      length: recipe.length\n    }, (_, i) => (startX + i) % recipe.length);\n    let current = {\n      spellingPath: [],\n      accidentalCount: 0\n    };\n    for (let [j, x] of Object.entries(xArray)) {\n      const match = Object.entries(numberMatrix[x]).find(([_, number]) => number === recipe[+j]);\n      if (match) {\n        const [y] = match;\n        current.spellingPath.push([x, +y]);\n        current.accidentalCount += Math.abs(+y);\n      } else {\n        current.accidentalCount = Infinity;\n        break;\n      }\n      ;\n    }\n    if (current.accidentalCount < best.accidentalCount) {\n      best = {\n        ...current\n      };\n    }\n    ;\n  });\n  return best.spellingPath;\n};\nexport const getIntervalStrings = (recipe, chordLength) => {\n  const normalizeNote = n => (n % 12 + 12) % 12;\n  let intervalStrings = [];\n  for (let i = 0; i < recipe.length; i++) {\n    let string = \"\";\n    for (let j = 0; j < chordLength - 1; j++) {\n      const note1 = recipe[(i + 2 * j) % recipe.length];\n      const note2 = recipe[(i + 2 * (j + 1)) % recipe.length];\n      const interval = normalizeNote(note2 - note1);\n      string += String(interval);\n    }\n    ;\n    intervalStrings.push(string);\n  }\n  return intervalStrings;\n};","map":{"version":3,"names":["numberMatrix","characterMatrix","positions","getSpellingPath","recipe","startingCoords","best","spellingPath","accidentalCount","Infinity","forEach","startX","_","i","xArray","Array","from","length","current","j","x","Object","entries","match","find","number","y","push","Math","abs","getIntervalStrings","chordLength","normalizeNote","n","intervalStrings","string","note1","note2","interval","String"],"sources":["C:/Users/Levi/Desktop/portfolio/src/Chart/modeFunctions.tsx"],"sourcesContent":["const numberMatrix: Array<{[key: number]: number}> = [\n  {[-2]: 10, [-1]: 11, 0:  0, 1:  1, 2:  2},\n  {[-2]:  0, [-1]:  1, 0:  2, 1:  3, 2:  4},\n  {[-2]:  2, [-1]:  3, 0:  4, 1:  5, 2:  6},\n  {[-2]:  3, [-1]:  4, 0:  5, 1:  6, 2:  7},\n  {[-2]:  5, [-1]:  6, 0:  7, 1:  8, 2:  9},\n  {[-2]:  7, [-1]:  8, 0:  9, 1: 10, 2: 11},\n  {[-2]:  9, [-1]: 10, 0: 11, 1:  0, 2:  1},\n]\n\nconst characterMatrix: Array<{[key: number]: string}> = [\n  {[-2]: 'C\\uED64', [-1]: 'C\\uED60', 0: 'C', 1: 'C\\uED62', 2: 'C\\uED63'},\n  {[-2]: 'D\\uED64', [-1]: 'D\\uED60', 0: 'D', 1: 'D\\uED62', 2: 'D\\uED63'},\n  {[-2]: 'E\\uED64', [-1]: 'E\\uED60', 0: 'E', 1: 'E\\uED62', 2: 'E\\uED63'},\n  {[-2]: 'F\\uED64', [-1]: 'F\\uED60', 0: 'F', 1: 'F\\uED62', 2: 'F\\uED63'},\n  {[-2]: 'G\\uED64', [-1]: 'G\\uED60', 0: 'G', 1: 'G\\uED62', 2: 'G\\uED63'},\n  {[-2]: 'A\\uED64', [-1]: 'A\\uED60', 0: 'A', 1: 'A\\uED62', 2: 'A\\uED63'},\n  {[-2]: 'B\\uED64', [-1]: 'B\\uED60', 0: 'B', 1: 'B\\uED62', 2: 'B\\uED63'},\n]\n\nconst positions: Array<Array<[number, number]>> = [\n  [[0, 0], [6, 1], [1,-2]],\n  [[1,-1], [0, 1], [6, 2]],\n  [[1, 0], [2,-2], [0, 2]],\n  [[2,-1], [1, 1], [3,-2]],\n  [[2, 0], [3,-1], [1, 2]],\n  [[3, 0], [2, 1], [4,-2]],\n  [[4,-1], [3, 1], [2, 2]],\n  [[4, 0], [5,-2], [3, 2]],\n  [[5,-1], [4, 1]],\n  [[5, 0], [6,-2], [4, 2]],\n  [[6,-1], [5, 1], [0,-2]],\n  [[6, 0], [0,-1], [5, 2]],\n]\n\nexport const getSpellingPath = (recipe: number[]) => {\n  const startingCoords = positions[recipe[0]];\n\n  let best: {spellingPath: Array<[number, number]>, accidentalCount: number} = {spellingPath: [], accidentalCount: Infinity};\n\n  startingCoords.forEach(([startX, _], i) => {\n    const xArray = Array.from({length: recipe.length}, (_, i) => (startX + i) % (recipe.length));\n    let current: {spellingPath: Array<[number, number]>, accidentalCount: number} = {spellingPath: [], accidentalCount: 0};\n\n    for (let [j, x] of Object.entries(xArray)) {\n      const match = Object.entries(numberMatrix[x]).find(([_, number]) => number === recipe[+j]);\n      if (match) {\n        const [y] = match;\n        current.spellingPath.push([x, +y]);\n        current.accidentalCount += Math.abs(+y);\n      } else {\n        current.accidentalCount = Infinity;\n        break;\n      };\n    }\n\n    if (current.accidentalCount < best.accidentalCount) { best = {...current} };\n  }); \n\n  return best.spellingPath;\n};\n\nexport const getIntervalStrings = (recipe: number[], chordLength: number) => {\n  const normalizeNote = (n: number) => (n % 12 + 12) % 12;\n\n  let intervalStrings = [];\n\n  for (let i = 0; i < recipe.length; i++) {\n\n    let string = \"\";\n\n    for (let j = 0; j < (chordLength - 1); j++) {\n      const note1 = recipe[(i + 2*j) % recipe.length];\n      const note2 = recipe[(i + 2*(j+1)) % recipe.length];\n      const interval = normalizeNote(note2 - note1);\n      string += String(interval);\n    };\n\n    intervalStrings.push(string);\n  }\n\n  return intervalStrings;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}