[{"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\index.tsx":"1","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\App.tsx":"2","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\index.tsx":"3","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeContext\\index.tsx":"4","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ProgBar\\index.tsx":"5","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\modeFunctions.tsx":"6","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\modeData.tsx":"7","C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\NoteCard\\index.tsx":"8"},{"size":241,"mtime":1703158908357,"results":"9","hashOfConfig":"10"},{"size":896,"mtime":1705270273996,"results":"11","hashOfConfig":"10"},{"size":10902,"mtime":1705282143014,"results":"12","hashOfConfig":"10"},{"size":4905,"mtime":1705248695034,"results":"13","hashOfConfig":"10"},{"size":6866,"mtime":1703438066731,"results":"14","hashOfConfig":"10"},{"size":2515,"mtime":1705275358063,"results":"15","hashOfConfig":"10"},{"size":8026,"mtime":1705278486551,"results":"16","hashOfConfig":"10"},{"size":1829,"mtime":1705270584217,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"sj5g4",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\index.tsx",[],[],["45"],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\App.tsx",[],[],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\index.tsx",["46","47","48","49","50","51","52","53","54","55","56"],[],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeContext\\index.tsx",["57","58","59"],[],"// The React component in this file deliberately strays from the React workflow because it features drag and drop events.\r\n// \r\n\r\nimport { useState, useEffect, createContext } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { DndContext, DragOverlay, useDraggable, useDroppable } from '@dnd-kit/core';\r\n\r\nimport { NoteCard, NoteCardWide } from '../NoteCard';\r\nimport { Payload } from '../types';\r\n\r\nexport const ProgContext = createContext<any>(undefined);\r\n\r\n// global variables\r\nlet debounceId: NodeJS.Timeout | undefined = undefined;\r\nlet parentId: string | undefined           = undefined;\r\nlet containerId: string | undefined        = undefined;\r\n\r\nexport const ModeContext = ({children}: {children: any}) => {\r\n\r\n  const debounce = (id: string, func: Function, ms: number = 200) => {\r\n    const timeoutId: NodeJS.Timeout = setTimeout(() => {\r\n      func();\r\n\r\n      debounceId = undefined;\r\n    }, ms);\r\n\r\n    debounceId = timeoutId;\r\n    parentId = id;\r\n  };\r\n\r\n  const cancelDebounce = () => {\r\n    clearTimeout(debounceId);\r\n    debounceId = undefined;\r\n  };\r\n\r\n\r\n  const [payloadStorage, setPayloadStorage] = useState<Payload | undefined>(undefined);\r\n\r\n  const handleDragStart = ({active}: any) => {\r\n    if (active.data.current) { \r\n      setPayloadStorage(active.data.current);\r\n      parentId = active.data.current?.sortable?.containerId;\r\n    };\r\n  }\r\n\r\n  const handleDragOver = async ({active, over}: any) => {\r\n\r\n    if (!payloadStorage) { return };\r\n\r\n    // CASE 1: Item dragged out of dnd-kit component (must be ProgBar, no other options).\r\n    if (!over) { \r\n\r\n      cancelDebounce();\r\n      containerId = undefined;\r\n      parentId = undefined;\r\n\r\n      // ensure item is currently child of ProgBar before removing.\r\n      if (active.data.current.origin === \"progBar\") {\r\n        const {chordRemove} = active.data.current.setFunc;\r\n        const activeContainerId = active.data.current?.sortable?.containerId;\r\n        chordRemove(activeContainerId, active.data.current.chord.id);\r\n\r\n        parentId = undefined;\r\n      };\r\n      return;\r\n    }\r\n\r\n    // wait for parentId to be set (sometimes handleDragStart has not finished yet).\r\n    if (active.data.current?.sortable) {\r\n      while(!parentId) {\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n      }\r\n    };\r\n\r\n    containerId = over.data.current?.sortable?.containerId;\r\n\r\n    // CASE 2: Item dragged around ProgBar it has already entered (but is not necessarily child of).\r\n    if (containerId === parentId) { \r\n      return \r\n    };\r\n\r\n    // CASE 3: Item dragged to NEW ProgBar.\r\n    if (debounceId) { \r\n      cancelDebounce();\r\n    };\r\n\r\n    // 3a) remove from old progBar\r\n    if (active.data.current?.origin === \"progBar\") {\r\n      \r\n      const {chordRemove} = active.data.current.setFunc;\r\n      const activeContainerId = active.data.current?.sortable?.containerId;\r\n      chordRemove(activeContainerId, active.data.current.chord.id);\r\n\r\n      parentId = undefined;\r\n    };\r\n\r\n    const {items, index} = over.data.current.sortable;\r\n    const {chordAppend} = over.data.current.setFunc;\r\n\r\n    const duplicateIndex = items.findIndex((id: any) => id === payloadStorage.chord.id);\r\n\r\n    // 3b) append to new progBar with debounce.\r\n    if (duplicateIndex === -1) {\r\n      debounce(\r\n        over.data.current?.sortable?.containerId, \r\n        () => { \r\n          chordAppend(containerId, index, {...payloadStorage.chord, seventh: payloadStorage.seventh, id: payloadStorage.chord.id});\r\n        }\r\n      );\r\n    };\r\n    \r\n    return;    \r\n  };\r\n\r\n  const handleDragEnd = ({active, over}: any) => {\r\n\r\n    if (!payloadStorage) { return };\r\n    if (payloadStorage.origin === 'modeList') {\r\n      // reset id of dragged modeList item to prevent copies\r\n      payloadStorage.setFunc((prevScales: Array<{id: string, root: string, type: {full: string, short: string, symbol: string}, num: string}>) => {\r\n        const newScales = [...prevScales];\r\n        newScales[payloadStorage.index].id = uuidv4();\r\n        return newScales;\r\n      });\r\n    };\r\n\r\n    if (!active.data.current) { return }; // occurs in between progBars with no index selected\r\n    if (!over) { return };\r\n    if (debounceId) { \r\n      cancelDebounce();\r\n      return ;\r\n    };\r\n    \r\n    const {chordSwap} = over.data.current.setFunc;\r\n    chordSwap(containerId, active.data.current.index, over.data.current.index);\r\n\r\n    debounceId  = undefined; \r\n    parentId    = undefined; \r\n    containerId = undefined;\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      onDragStart={handleDragStart}\r\n      onDragOver={handleDragOver}\r\n      onDragEnd={handleDragEnd}\r\n      onDragCancel={handleDragEnd}\r\n    >\r\n      {children}\r\n      {payloadStorage ? <DragOverlay>{ payloadStorage.seventh ? <NoteCardWide chord={payloadStorage.chord}/> : <NoteCard chord={payloadStorage.chord}/> }</DragOverlay> : <></>}\r\n    </DndContext>\r\n  );\r\n}\r\n",["60"],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ProgBar\\index.tsx",["61","62","63","64"],[],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\modeFunctions.tsx",[],[],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\ModeList\\modeData.tsx",[],[],"C:\\Users\\Levi\\Documents\\GithubRepositories\\portfolio\\src\\NoteCard\\index.tsx",[],[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":6,"column":10,"nodeType":"69","messageId":"70","endLine":6,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":6,"column":22,"nodeType":"69","messageId":"70","endLine":6,"endColumn":33},{"ruleId":"67","severity":1,"message":"72","line":6,"column":35,"nodeType":"69","messageId":"70","endLine":6,"endColumn":51},{"ruleId":"67","severity":1,"message":"73","line":6,"column":67,"nodeType":"69","messageId":"70","endLine":6,"endColumn":79},{"ruleId":"67","severity":1,"message":"74","line":7,"column":10,"nodeType":"69","messageId":"70","endLine":7,"endColumn":19},{"ruleId":"67","severity":1,"message":"75","line":7,"column":21,"nodeType":"69","messageId":"70","endLine":7,"endColumn":36},{"ruleId":"67","severity":1,"message":"76","line":7,"column":38,"nodeType":"69","messageId":"70","endLine":7,"endColumn":67},{"ruleId":"67","severity":1,"message":"77","line":7,"column":69,"nodeType":"69","messageId":"70","endLine":7,"endColumn":80},{"ruleId":"67","severity":1,"message":"78","line":10,"column":10,"nodeType":"69","messageId":"70","endLine":10,"endColumn":28},{"ruleId":"67","severity":1,"message":"79","line":10,"column":47,"nodeType":"69","messageId":"70","endLine":10,"endColumn":58},{"ruleId":"80","severity":1,"message":"81","line":237,"column":45,"nodeType":"82","endLine":237,"endColumn":75,"suggestions":"83"},{"ruleId":"67","severity":1,"message":"84","line":4,"column":20,"nodeType":"69","messageId":"70","endLine":4,"endColumn":29},{"ruleId":"67","severity":1,"message":"85","line":8,"column":35,"nodeType":"69","messageId":"70","endLine":8,"endColumn":47},{"ruleId":"67","severity":1,"message":"73","line":8,"column":49,"nodeType":"69","messageId":"70","endLine":8,"endColumn":61},{"ruleId":"65","replacedBy":"86"},{"ruleId":"67","severity":1,"message":"87","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":20},{"ruleId":"67","severity":1,"message":"88","line":9,"column":10,"nodeType":"69","messageId":"70","endLine":9,"endColumn":21},{"ruleId":"67","severity":1,"message":"89","line":75,"column":10,"nodeType":"69","messageId":"70","endLine":75,"endColumn":20},{"ruleId":"80","severity":1,"message":"90","line":130,"column":6,"nodeType":"82","endLine":130,"endColumn":8,"suggestions":"91"},"no-new-object",["92"],"@typescript-eslint/no-unused-vars","'DndContext' is defined but never used.","Identifier","unusedVar","'DragOverlay' is defined but never used.","'rectIntersection' is defined but never used.","'useDroppable' is defined but never used.","'arrayMove' is defined but never used.","'SortableContext' is defined but never used.","'horizontalListSortingStrategy' is defined but never used.","'useSortable' is defined but never used.","'getIntervalStrings' is defined but never used.","'getNumerals' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calcTransposedData'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'useEffect' is defined but never used.","'useDraggable' is defined but never used.",["92"],"'useContext' is defined but never used.","'ProgContext' is defined but never used.","'setNodeRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'defLineObj'. Either include it or remove the dependency array.",["94"],"no-object-constructor",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [modeTab, transpose, refCoord, calcTransposedData]",{"range":"99","text":"100"},"Update the dependencies array to be: [defLineObj]",{"range":"101","text":"102"},[8384,8414],"[modeTab, transpose, refCoord, calcTransposedData]",[3731,3733],"[defLineObj]"]